<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp="Componentes.comp.*" xmlns:master="com.flexpernambuco.controls.*"
	 width="100%" height="100%" creationComplete="create()">
	 
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Button label="BUSCAR" click="load()" icon="{Imagens.unica.icn_64_Atualiza}" labelPlacement="bottom"/>
	</mx:HBox>
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Image source="{Imagens.unica.swf_loading}" scaleX="3" scaleY="3" />
	</mx:HBox>
	
	<mx:VBox width="100%" height="100%">
	
		<comp:Botao2 width="120" label="Inserir"
			cor="Branco" icone="Adiciona"
			click ="novoAmigo()" />	
		
		<mx:DataGrid id="grid" width="100%" height="100%"
			themeColor="#3B5998" headerColors="[#efefef,#3B5998]"
			editable="false">
			<mx:columns>
				<mx:DataGridColumn width="100" dataField="key"  headerText="Descrição"/>
				<mx:DataGridColumn width="200" dataField="nome" headerText="Nome"/>
				<mx:DataGridColumn width="75" dataField="data" headerText="Data"/>
				<mx:DataGridColumn width="75" dataField="fone" headerText="Telefone" />
				<mx:DataGridColumn width="100" dataField="obs"  headerText="Observação"/>
				<mx:DataGridColumn width="45" editable="false" headerText="Dependente">
					<mx:itemRenderer>
						<mx:Component>
							<mx:CheckBox selected="{data.ehDependente}" textAlign="center" enabled="false"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="45" editable="false" headerText="Autorizado">
					<mx:itemRenderer>
						<mx:Component>
							<mx:CheckBox selected="{data.ehAutorizado}" textAlign="center" enabled="false"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="100" headerText=" " editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Button label="{'Alterar'}"
								width="80%" labelPlacement="right" color="#008800"
								click="dispatchEvent(new Event('editRow', true))" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="100" headerText=" " editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Button label="{(data.isDeletado)?'removido':''}"
								width="80%" icon="@Embed(source='../../../../img/icones/16/cancela1.png')" 
								click = "dispatchEvent(new Event('deleteRow', true))"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:Panel id="popupEditar"
			width="500" height="400" layout="absolute"
			borderAlpha="1"
			fontSize="14"
			headerHeight="10">
			
			<mx:Image x="10" y="10" source="{Imagens.unica.icn_32_funcionario}" />
			<mx:Label x="45" y="10" fontSize="20" fontWeight="bold" text="Dependentes \ Autorizados" />
			
			<comp:Botao2 width="120" label="Voltar"
				bottom="10" right="140"
				cor="Branco" icone="Deleta"
				click="{ cancela() }"/>
			<comp:Botao2 width="120" label="OK"
				bottom="10" right="10"
				cor="Branco" icone="Adiciona"
				click="{ edita() }"/>
				
			<mx:VBox x="10" y="42" width="100%" fontSize="12">
				<mx:Label text="Descrição"/>
				<master:MasterTextInput id="boundDescricaoTextInput" width="400" capsType="upercase"/>
				<mx:Label text="Nome"/>
				<master:MasterTextInput id="boundNomeTextInput" width="400" capsType="upercase"/>
				<mx:HBox width="100%">
					<mx:VBox width="50%">
						<mx:Label text="Telefone"/>
						<master:MasterTextInput id="boundTelefoneTextInput" validator="phone" inputMask="(99)9999-9999"/>
					</mx:VBox>
					<mx:VBox width="50%">
						<mx:Label text="Data Nasc."/>
						<master:MasterTextInput id="boundDataNascTextInput" validator="date" inputMask="99/99/9999" required="false"/>
					</mx:VBox>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:VBox width="50%">
						<mx:Label text="Dependente"/>
						<mx:CheckBox id="boundDependenteCheckBox"/>
					</mx:VBox>
					<mx:VBox width="50%">
						<mx:Label text="Autorizado"/>
						<mx:CheckBox id="boundAutorizadoCheckBox"/>
					</mx:VBox>
				</mx:HBox>
				<mx:Label text="Observação"/>
				<master:MasterTextInput id="boundObsTextInput" width="400" capsType="upercase"/>
			</mx:VBox>
			
		</mx:Panel>
		
	</mx:VBox>
	
	
	<mx:Script>
		<![CDATA[
			import mx.validators.ValidationResult;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			import Core.Utils.Funcoes;
			import mx.managers.PopUpManager;
			import mx.core.Application;
			import SDE.Entidade.ClienteFamiliar;
		
			import flash.utils.setTimeout;
			import Core.Alerta.AlertaSistema;
			import SDE.Entidade.Cliente;
			import SDE.Parametro.ParamLoadCliente;
			import janelas.cadastro.Cliente1.JanelaCadCliente;
			import SDE.FachadaServico.FcdCliente;
			import img.Imagens;
			[Bindable] public var mdlPai: JanelaCadCliente;
			
			private function get c():Cliente
			{
				return mdlPai.cliente;
			}
			
			private var dependenteAutorizadoEditando:ClienteFamiliar = null;
			private var dependenteAutorizadoOriginal:ClienteFamiliar = null;
			
			private function create():void
			{
				mdlPai.addEventListener(JanelaCadCliente.EV_MUDA_CLIENTE, mudaCliente);
				grid.addEventListener('editRow', editRowHandler);
				grid.addEventListener('deleteRow', deleteRowHandler);
				popupEditar.parent.removeChild(popupEditar);
			}
			
			private function mudaCliente(ev:Object):void
			{
				selectedIndex = 0;
				grid.dataProvider = null;
			}
			
			private function load():void
			{				
				selectedIndex = 1;
				
				var param:ParamLoadCliente = new ParamLoadCliente();
				param.ignorar=true;
				param.familiares=true;
				
				FcdCliente.unica.Load(mdlPai.cliente.id, param,
					function(retorno:Cliente):void
					{
						c.__familiares = retorno.__familiares;
						selectedIndex = 2;
						grid.dataProvider = c.__familiares;
					}
				);
				
			}
			
			private function cancela():void
			{
				//trata-se de uma edição
				if (dependenteAutorizadoOriginal!=null)
					c.__familiares.push(dependenteAutorizadoOriginal);
				
				atualizaTelaFecha();
			}
			private function edita():void
			{
				/**INICIO VALIDAÇÃO*/
				
				var msg:String = "";
				var resultEvent:ValidationResultEvent;
				
				if (boundDescricaoTextInput.length < 3)
					msg += "Digite a DESCRIÇÃO\n";
				if (boundNomeTextInput.length < 3)
					msg += "Digite o NOME\n";
				if (boundTelefoneTextInput.text != "")
				{
					resultEvent = boundTelefoneTextInput.currentValidator.validate();
					if (resultEvent.type != ValidationResultEvent.VALID)
						msg += "O TELEFONE deve estar no formato (00)0000-0000\n";
				}
				else
					msg += "Digite o TELEFONE\n";
				if (!boundDependenteCheckBox.selected && !boundAutorizadoCheckBox.selected)
					msg += "Selecione DEPENDENTE e/ou AUTORIZADO\n";
				if (boundDataNascTextInput.text != "")
				{
					resultEvent = boundDataNascTextInput.currentValidator.validate();
					if( resultEvent.type != ValidationResultEvent.VALID )
				 		msg += "A DATA NASC. deve estar no formato DD/MM/AAAA\n";
				}
				if (msg != "")
				{
					AlertaSistema.mensagem(msg);
					return;
				}
				/**FIM VALIDAÇÃO*/
				
				c.__familiares.push(dependenteAutorizadoEditando.clone());
				
				atualizaTelaFecha();
			}
			
			private function atualizaTelaFecha():void
			{
				//atualiza na tela
				grid.dataProvider = c.__familiares;
				PopUpManager.removePopUp(popupEditar);
			}
			
			private function novoAmigo():void
			{
				
				dependenteAutorizadoOriginal = null;
				dependenteAutorizadoEditando = new ClienteFamiliar();
				dependenteAutorizadoEditando.idCliente = c.id;
				mostraPopUp();
			}
			
			private function mostraPopUp():void
			{
				PopUpManager.addPopUp(popupEditar, Application.application.gerenteJanelas, true);
				PopUpManager.centerPopUp(popupEditar);
				doBinding();
			}
			
			private function doBinding():void
			{
				Funcoes.myBind(boundDescricaoTextInput, "text", dependenteAutorizadoEditando, "key");
				Funcoes.myBind(boundNomeTextInput, "text", dependenteAutorizadoEditando, "nome");
				Funcoes.myBind(boundTelefoneTextInput, "text", dependenteAutorizadoEditando, "fone");
				Funcoes.myBind(boundDataNascTextInput, "text", dependenteAutorizadoEditando, "data");
				Funcoes.myBind(boundDependenteCheckBox, "selected", dependenteAutorizadoEditando, "ehDependente");
				Funcoes.myBind(boundAutorizadoCheckBox, "selected", dependenteAutorizadoEditando, "ehAutorizado");
				Funcoes.myBind(boundObsTextInput, "text", dependenteAutorizadoEditando, "obs");
			} 
			
			private function editRowHandler(event:Event):void
            {
            	dependenteAutorizadoOriginal = event.target.data;
            	
            	var index:int = c.__familiares.indexOf(dependenteAutorizadoOriginal);
            	c.__familiares.splice(index, 1);//returns removed items
            	
            	dependenteAutorizadoEditando = dependenteAutorizadoOriginal.clone();//cria um clone
            	dependenteAutorizadoEditando.isDeletado = false;
            	mostraPopUp();
            }
			
			private function deleteRowHandler(event:Event): void
			{
				var cf:ClienteFamiliar = event.target.data;
				cf.isDeletado = !cf.isDeletado;
				
				if (cf.isDeletado && cf.id == 0)
            	{
		            	var index:int = c.__familiares.indexOf(cf);
		            	c.__familiares.splice(index, 1);
            	}
				grid.dataProvider = c.__familiares;
			}
			
		]]>
	</mx:Script>
	
	
</mx:ViewStack>



