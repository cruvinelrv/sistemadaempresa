<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp="Componentes.comp.*" xmlns:controls="com.flexpernambuco.controls.*"
	width="100%" height="100%"
	preinitialize="inicia()"
	creationComplete="create()" xmlns:controls1="com.adobe.flex.extras.controls.*" xmlns:intelli="br.absolutobrasil.intelli.*">
	
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Button label="BUSCAR" click="load()" icon="{Imagens.unica.icn_64_Atualiza}" labelPlacement="bottom" />
	</mx:HBox>
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Image source="{Imagens.unica.swf_loading}" scaleX="3" scaleY="3" />
	</mx:HBox>
	<mx:VBox width="100%" height="100%">
	
		<comp:Botao2 width="120" label="Inserir"
			cor="Branco" icone="Adiciona"
			click="{novo()}" 
			horizontalCenter="0"/>
		
		<mx:DataGrid id="grid" width="100%" height="100%"
			themeColor="#3B5998" headerColors="[#efefef,#3B5998]"
			editable="false">
			<mx:columns>
				<mx:DataGridColumn dataField="nome" headerText="Descrição" />
				<mx:DataGridColumn dataField="placaNumero" headerText="Placa"/>
				<mx:DataGridColumn dataField="placaUF" headerText="UF"/>
				<mx:DataGridColumn dataField="regNacTranspCarga" headerText="Reg Nac Transp Carga"/>
				<mx:DataGridColumn dataField="chassi" headerText="Chassi"/>
				<mx:DataGridColumn dataField="numSerieMotor" headerText="Num Serie do Motor"/>
				<mx:DataGridColumn dataField="franquia" headerText="Franquia"/>
				<mx:DataGridColumn dataField="ano" headerText="Ano"/>
				<mx:DataGridColumn dataField="marca" headerText="Marca"/>
				<mx:DataGridColumn dataField="modelo" headerText="Modelo"/>
				<mx:DataGridColumn dataField="valorFIPE" headerText="Valor Tabela FIPE"/>
				<mx:DataGridColumn headerText=" " width="100" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Button label="{'Alterar'}"
								width="80%" labelPlacement="right" color="#008800"
								click="dispatchEvent(new Event('editRow', true))" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText=" " width="100" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Button label="{(data.isDeletado) ? 'removido':''}"
								width="80%" labelPlacement="right" color="#840000"
								icon="@Embed(source='../../../../img/icones/16/cancela1.png')"
								click="dispatchEvent(new Event('deleteRow', true))" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:Panel id="popupEditar"
			width="400" height="500" layout="absolute"
			borderAlpha="1"
			fontSize="14"
			headerHeight="10">
			
			<mx:Image x="10" y="10" source="{Imagens.unica.icn_32_fornecedor}" />
			<mx:Label x="45" y="10" fontSize="20" fontWeight="bold" text="Veiculos" />
			
			<comp:Botao2 width="120" label="Voltar"
				bottom="10" right="140"
				cor="Branco" icone="Deleta"
				click="{ cancela() }"/>
			<comp:Botao2 width="120" label="OK"
				bottom="10" right="10"
				cor="Branco" icone="Adiciona"
				click="{ edita() }"/>
			
			<mx:VBox y="42" verticalAlign="middle" styleName="padding10" >
				<mx:Label text="Descrição"/>
				<controls:MasterTextInput id="boundNovoTextInput" capsType="upercase" width="160" />
				
				<mx:Label text="Tipo" />
				<mx:ComboBox id="boundTipoComboBox" dataProvider="{EVeiculoTipo.getCampos()}" labelFunction="fn_ComboTipoVeiculo_Label" width="160" />
				
				<mx:Label text="Placa"/>
				<!--<controls1:MaskedTextInput id="boundPlacaMaskedTextInput" inputMask="...-####" width="160"/>-->
				<controls:MasterTextInput id="boundPlacaMaskedTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="UF"/>
				<intelli:ComBoxSiglaEstadosBR id="boundUFComboBox" width="160"/>
				
				<mx:Label text="Reg Nac Transp Carga"/>
				<controls:MasterTextInput id="boundRNTCTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="Chassi"/>
				<controls:MasterTextInput id="boundChassiTextInput" capsType="upercase" width="160"/>
			</mx:VBox>
			<mx:VBox y="42" right="0" verticalAlign="middle" styleName="padding10">
				<mx:Label text="Num Série do Motor"/>
				<controls:MasterTextInput id="boundNumSerieMotorTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="Franquia"/>
				<controls:MasterTextInput id="boundFranquiaTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="Ano"/>
				<mx:NumericStepper id="boundAnoNumericStepper" minimum="1950" maximum="999999" width="160"/>
				
				<mx:Label text="Marca"/>
				<controls:MasterTextInput id="boundMarcaTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="Modelo"/>
				<controls:MasterTextInput id="boundModeloTextInput" capsType="upercase" width="160"/>
				
				<mx:Label text="FIPE(R$)"/>
				<mx:NumericStepper id="boundFIPENumericStepper" stepSize="0.01" minimum="0" maximum="999999" width="160" />
			</mx:VBox>
			
		</mx:Panel>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import Core.Utils.Funcoes;
			import mx.managers.PopUpManager;
			import SDE.Enumerador.EVeiculoTipo;
			import SDE.Entidade.ClienteVeiculo;
			import img.Imagens;
			import flash.utils.setTimeout;
			import Core.Alerta.AlertaSistema;
			import SDE.Entidade.Cliente;
			import SDE.Parametro.ParamLoadCliente;
			import janelas.cadastro.Cliente1.JanelaCadCliente;
			import SDE.FachadaServico.FcdCliente;
			import img.Imagens;
			
			[Bindable] public var mdlPai:JanelaCadCliente;	
			
			private function get c():Cliente
			{
				return mdlPai.cliente;
			}
			
			private var veiculoEditando:ClienteVeiculo = null;
			private var veiculoOriginal:ClienteVeiculo = null;
			
			private var tipoVeiculoTexto:Array = null;
			
			private function fn_ComboTipoVeiculo_Label(tipoVeiculo:String):String
			{
				return tipoVeiculoTexto[tipoVeiculo];
			}
			
			private function inicia():void
			{
				tipoVeiculoTexto = [];
				tipoVeiculoTexto['automovel'] = 'Automóvel';
				tipoVeiculoTexto['caminhao'] = 'Caminhão';
				tipoVeiculoTexto['motocicleta'] = 'Motocicleta';
				tipoVeiculoTexto['reboque'] = 'Reboque';
				tipoVeiculoTexto['semi_reboque'] = 'Semi-reboque';
				tipoVeiculoTexto['maquina_agricola'] = 'Máquina Agrícola';
			}
			
			private function create():void
			{
				mdlPai.addEventListener(JanelaCadCliente.EV_MUDA_CLIENTE, mudaCliente);
				grid.addEventListener('editRow', editRowHandler);
				grid.addEventListener('deleteRow', deleteRowHandler);
				popupEditar.parent.removeChild(popupEditar);
			}
			
			private function mudaCliente(ev:Object):void
			{
				selectedIndex = 0;
				grid.dataProvider = null;
			}
			
			private function load():void
			{
				selectedIndex = 1;
				
				var param:ParamLoadCliente = new ParamLoadCliente();
				param.ignorar=true;
				param.veiculos=true;
				
				FcdCliente.unica.Load(mdlPai.cliente.id, param,
					function(retorno:Cliente):void
					{
						AlertaSistema.mensagem( "C: "+mdlPai.cliente.id+" largura: "+retorno.__veiculos.length , true);
						c.__veiculos = retorno.__veiculos;
						selectedIndex = 2;
						grid.dataProvider = c.__veiculos;
					}
				);
				
			}
			
			
			
			private function cancela():void
			{
				//trata-se de uma edição
				if (veiculoOriginal!=null)
					c.__veiculos.push(veiculoOriginal);
				
				atualizaTelaFecha();
			}
			private function edita():void
			{
				/**INICIO VALIDAÇÃO*/
				var msg:String = "";
				if (boundNovoTextInput.length < 3)
					msg += "Digite uma DESCRIÇÃO\n";
				if (boundPlacaMaskedTextInput.length < 7)
					msg += "Digite a PLACA\n";
				if (boundUFComboBox.selectedIndex == 0)
					msg += "Selecione um ESTADO(UF)\n";
				if (boundMarcaTextInput.length < 3)
					msg += "Digite uma MARCA\n";
				if (boundModeloTextInput.length <3)
					msg += "Digite um MODELO\n";
					
				if (msg!="")
				{
					AlertaSistema.mensagem(msg);
					return;
				}
				/**FIM VALIDAÇÃO*/
				
				c.__veiculos.push(veiculoEditando.clone());
				
				atualizaTelaFecha();
			}
			private function atualizaTelaFecha():void
			{
				//atualiza na tela
				grid.dataProvider = c.__veiculos;
				PopUpManager.removePopUp(popupEditar);
			}
			
			private function doBinding():void
			{
				Funcoes.myBind(boundNovoTextInput, "text", veiculoEditando, "nome");
				Funcoes.myBind(boundTipoComboBox, "selectedItem", veiculoEditando, "tipo");
				Funcoes.myBind(boundPlacaMaskedTextInput, "text", veiculoEditando, "placaNumero");
				Funcoes.myBind(boundUFComboBox, "text", veiculoEditando, "placaUF");
				Funcoes.myBind(boundRNTCTextInput, "text", veiculoEditando, "regNacTranspCarga");
				Funcoes.myBind(boundChassiTextInput, "text", veiculoEditando, "chassi");
				Funcoes.myBind(boundNumSerieMotorTextInput, "text", veiculoEditando, "numSerieMotor");
				Funcoes.myBind(boundFranquiaTextInput, "text", veiculoEditando, "franquia");
				Funcoes.myBind(boundAnoNumericStepper, "value", veiculoEditando, "ano");
				Funcoes.myBind(boundMarcaTextInput, "text", veiculoEditando, "marca");
				Funcoes.myBind(boundModeloTextInput, "text", veiculoEditando, "modelo");
				Funcoes.myBind(boundFIPENumericStepper, "value", veiculoEditando, "valorFIPE");
			}
			
			private function novo():void
			{
				//não tem original, tem editando
				veiculoOriginal = null;
				veiculoEditando = new ClienteVeiculo();
				veiculoEditando.idCliente = c.id;
				veiculoEditando.tipo = EVeiculoTipo.automovel;
            	mostraPopup();
			}

			private function mostraPopup():void
			{
				PopUpManager.addPopUp(popupEditar, Application.application.gerenteJanelas, true);
				PopUpManager.centerPopUp(popupEditar);
				
				doBinding();
				//use binding para preencher os campos
				//Funcoes.myBind();	
			}
            private function editRowHandler(event:Event):void
            {
            	//vamos retirar o item temporariamente da lista
            	
				//tem original E tem editando
            	veiculoOriginal = event.target.data;
            	
            	var index:int = c.__veiculos.indexOf(veiculoOriginal);
            	c.__veiculos.splice(index, 1);//returns removed items
            	
            	veiculoEditando = veiculoOriginal.clone();//cria um clone
            	veiculoEditando.isDeletado = false;
            	mostraPopup();
            }
            private function deleteRowHandler(event:Event):void
            {
            	var xxx:ClienteVeiculo = event.target.data;
            	xxx.isDeletado = !xxx.isDeletado;
            	
            	if (xxx.isDeletado)
            	{
            		if (xxx.id==0)
            		{
		            	var index:int = c.__veiculos.indexOf(xxx);
		            	c.__veiculos.splice(index, 1);//returns removed items
	            	}
            	}
				grid.dataProvider = c.__veiculos;
            }
		]]>
	</mx:Script>
	
</mx:ViewStack>
