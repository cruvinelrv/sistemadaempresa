using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using SDE.CamadaServico;
using SDE.Entidade;
using SDE.Parametro;
using SDE.Enumerador;
using Db4objects.Db4o;
using Db4objects.Db4o.Query;
using System.Globalization;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.IO;
using SDE.CamadaNuvem;
using SDE.RelatoriosPaginaWeb;

namespace SDE.Web
{
    public partial class imprime : System.Web.UI.Page
    {

        protected void Page_Load(object sender, EventArgs e)
        {
            body.Attributes["class"] = "carregando";
            Timer1.Interval = 500;
            Timer1.Enabled = true;

            Page.EnableViewState = false;
        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            Timer1.Enabled = false;
            escreveRelatorio();
            body.Attributes["class"] = "";
        }

        private void escreveRelatorio()
        {
            try
            {
                int idCorp = int.Parse(Request.QueryString["idCorp"]);
                int idEmp = int.Parse(Request.QueryString["idEmp"]);

                //string hashCorp = Request.QueryString["hash"];
                //Request.QueryString[""]
                string tipoImpressao = Request.QueryString["tipoImpressao"];

                StringBuilder sb = new StringBuilder();

                switch (tipoImpressao)
                {
                    case "relatorio":
                        string relatorio = Request.QueryString["relatorio"];

                        switch (relatorio)
                        {
                            case "relEstoque":
                                RelEstoque relEstoque = new RelEstoque();
                                sb = relEstoque.GeraRelEstoque(idCorp, idEmp, Convert.ToBoolean(Request.QueryString["exibeGrade"]), Convert.ToBoolean(Request.QueryString["exibeEstoqueZerado"]));
                                break;
                            case "relListaPreco":
                                RelListaPreco relListaPreco = new RelListaPreco();
                                sb = relListaPreco.GeraRelListaPreco(idCorp, idEmp);
                                break;
                            case "relListagemBalanco":
                                RelListagemBalanco relListagemBalanco = new RelListagemBalanco();
                                sb = relListagemBalanco.GeraRelListagemBalanco(idCorp, idEmp);
                                break;
                            case "relEspelhoMov":
                                RelEspelhoMov relEspelhoMov = new RelEspelhoMov();
                                sb = relEspelhoMov.GeraRelEspelhoMov(idCorp, idEmp, Request.QueryString["dtInicial"], Request.QueryString["dtFinal"], Convert.ToInt32(Request.QueryString["idCliente"]), Convert.ToInt32(Request.QueryString["idVendedor"]), Convert.ToInt32(Request.QueryString["idItem"]), Convert.ToInt32(Request.QueryString["idMov"]),
                                    Convert.ToBoolean(Request.QueryString["entrada_compra"]), Convert.ToBoolean(Request.QueryString["saida_venda"]), Convert.ToBoolean(Request.QueryString["outros_orcamento"]), Convert.ToBoolean(Request.QueryString["entrada_cancel"]), Convert.ToBoolean(Request.QueryString["saida_cancel"]), Convert.ToBoolean(Request.QueryString["ambos_ajuste_estoque"]), Convert.ToBoolean(Request.QueryString["ambos_balan"]), Convert.ToBoolean(Request.QueryString["outros_reserva"]), Convert.ToBoolean(Request.QueryString["outros_pedido"]),
                                    Convert.ToBoolean(Request.QueryString["sem_impressao"]), Convert.ToBoolean(Request.QueryString["nfe_produto"]), Convert.ToBoolean(Request.QueryString["nf_formulario"]), Convert.ToBoolean(Request.QueryString["cupom_fiscal"]), Convert.ToBoolean(Request.QueryString["orcamento"]), Convert.ToBoolean(Request.QueryString["reserva"]), Convert.ToBoolean(Request.QueryString["pedido"]));
                                break;
                            case "relCaixa":
                                RelCaixa relCaixa = new RelCaixa();
                                sb = relCaixa.GeraRelCaixa(idCorp, idEmp, Request.QueryString["dtCaixa"], Convert.ToBoolean(Request.QueryString["corporativo"]));
                                break;
                            case "relPisCofins":
                                RelPisCofins relPisCofins = new RelPisCofins();
                                sb = relPisCofins.GeraRelPisCofins(idCorp, idEmp, Request.QueryString["dtInicial"], Request.QueryString["dtFinal"]);
                                break;
                            case "relExtratoContaCorrenteCaixa":
                                RelExtratoContaCorerenteCaixa relExtratoContaCorrenteCaixa = new RelExtratoContaCorerenteCaixa();
                                sb = relExtratoContaCorrenteCaixa.GeraRelExtratoContaCorrenteCaixa(idCorp, idEmp, Convert.ToInt32(Request.QueryString["idConta"]), Convert.ToInt32(Request.QueryString["idCentroCusto"]), Convert.ToInt32(Request.QueryString["idPlanoConta"]), Request.QueryString["dtInicial"], Request.QueryString["dtFinal"]);
                                break;
                            case "relTitulosReceberPagar":
                                RelTitulosReceberPagar relTitulosReceberPagar = new RelTitulosReceberPagar();
                                sb = relTitulosReceberPagar.GeraRelTitulosReceberPagar(idCorp, idEmp, Request.QueryString["dtInicial"], Request.QueryString["dtFinal"], Convert.ToInt32(Request.QueryString["idCliente"]), Convert.ToInt32(Request.QueryString["idPortador"]),
                                    Convert.ToBoolean(Request.QueryString["titulo_a_pagar"]), Convert.ToBoolean(Request.QueryString["titulo_a_receber"]), Convert.ToBoolean(Request.QueryString["em_aberto"]), Convert.ToBoolean(Request.QueryString["lancado"]));
                                break;
                            case "relCheques":
                                RelCheques relCheques = new RelCheques();
                                sb = relCheques.GeraRelCheques(idCorp, idEmp, Request.QueryString["dtInicial"], Request.QueryString["dtFinal"], Convert.ToBoolean(Request.QueryString["cheques_a_receber"]), Convert.ToBoolean(Request.QueryString["cheques_baixados"]), Convert.ToBoolean(Request.QueryString["cheques_compensados"]), Convert.ToBoolean(Request.QueryString["cheques_devolvidos"]));
                                break;
                            case "relComissionamentoDinamico":
                                RelComissionamentoDinamico relComissionamentoDinamico = new RelComissionamentoDinamico();
                                sb = relComissionamentoDinamico.GeraRelComissionamentoDinamico(idCorp, idEmp, Request.QueryString["dtInicial"], Request.QueryString["dtFinal"], Convert.ToInt32(Request.QueryString["idFuncionario"]), Convert.ToBoolean(Request.QueryString["exibeMovimentacao"]));
                                break;
                            case "relProdutosVendidosPeriodo":
                                RelProdutosVendidosPeriodo relProdutosVendidosPeriodo = new RelProdutosVendidosPeriodo();
                                sb = relProdutosVendidosPeriodo.GeraRelProdutosVendidosPeriodo(idCorp, idEmp, Convert.ToInt32(Request.QueryString["idItem"]), Request.QueryString["dtInicial"], Request.QueryString["dtFinal"]);
                                break;
                        }
                        break;
                    default:
                        break;
                }

                anota("form1 =");
                Literal1.Text = sb.ToString();

                anota("form1 =;");
            }
            catch (Exception)
            {
                Response.Write("<h1>Ocorreu um erro durante a construção do relatório.</h1>");
                //throw; // new Exception(ex.ToString());
            }
            anota("acabou metodo");
        }


        //private string APPEND = @"C:\Inetpub\Dados\lalale.txt";
        //private long ticks, dif;
        private void anota(string s)
        {
            /*
            dif = DateTime.Now.Ticks - ticks;
            System.IO.File.AppendAllText(APPEND, DateTime.Now.TimeOfDay.ToString() + " - " + s + Environment.NewLine);
            ticks = DateTime.Now.Ticks;
             * */
        }
<<<<<<< .mine

        private void relatorioPessoa(StringBuilder sb, int idCorp, int idEmp, string tipoRelatorio)
        {
            //pesquisa dados
            //tipos:
            //'cliente', 'fornecedor', 'transportador', 'funcionario', 'parceiro'
            string nomeEmpresa = "Empresa " + idEmp.ToString();

            SCorp sCorp = new SCorp();
            Empresa emp = sCorp.LoadEmpresa(idCorp, idEmp);

            
            SCliente sCli = new SCliente();
            ParamFiltroCliente pf = new ParamFiltroCliente();
            pf.cliente= (tipoRelatorio.ToLower() == "cliente");
            pf.funcionario = (tipoRelatorio.ToLower() == "funcionario");
            pf.fornecedor = (tipoRelatorio.ToLower() == "fornecedor");
            pf.transportador = (tipoRelatorio.ToLower() == "transportador");
            pf.parceiro = (tipoRelatorio.ToLower() == "parceiro");
            ParamLoadCliente pl = new ParamLoadCliente() { contatos = true, enderecos=true/**/ };


            emp.__cliente = sCli.Load(idCorp, emp.idCliente,pl);
            IList<Cliente> clientes = sCli.Pesquisa(idCorp, pf, pl);
            //

            anota("vou desenhar table");
            sb.Append("<table class='tabela'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='2'>{0}</th>", emp.__cliente.nome);
            sb.AppendFormat("<th scope='col' colspan='3'>Relatório de {0}</th>", tipoRelatorio);
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.Append("<th scope='col'>cod</th>");
            sb.Append("<th scope='col'>cpf/cnpj</th>");
            sb.Append("<th scope='col'>nome</th>");
            sb.Append("<th scope='col'>cidade</th>");
            sb.Append("<th scope='col'>contatos</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            pl.contatos = true;
            pl.ignorar = true;
            //pl.enderecos = true;

            SortedList<int, string> linhas = new SortedList<int, string>();

            anota("desenhei table");
            anota("[");
            for (int i = 0; i < clientes.Count; i++)
            {
                Cliente c = clientes[i];
                //Cliente c2 = sCli.Load(idCorp, c.id, pl);

                if (c.idPessoa == 1)
                    continue;

                string cContatos = "";//c.__pessoa.__contatos.ToString();//"dummy";//
                for (int j = 0; i < c.__contatos.Count; i++)
                    cContatos += string.Format("{0}: {1}<br/>", c.__contatos[j].campo, c.__contatos[j].valor);

                string cCidade = "";//c.__pessoa.__enderecos.ToString();
                for (int j = 0; i < c.__enderecos.Count; i++)
                    cCidade += string.Format("{0}: {1}<br/>", c.__enderecos[j].campo, c.__enderecos[j].cidade);

                StringBuilder sb2 = new StringBuilder();
                sb2.Append("<tr>");
                sb2.AppendFormat("<td>{0}</td>", c.id);
                sb2.AppendFormat("<td>{0}</td>", c.cpf_cnpj);
                sb2.AppendFormat("<td>{0}</td>", c.nome);
                sb2.AppendFormat("<td>{0}</td>", cCidade);
                sb2.AppendFormat("<td>{0}</td>", cContatos);
                sb2.Append("</tr>");
                linhas.Add(c.id, sb2.ToString());
            }
            /*
            for (int i = 0; i < linhas.Count; i++)
                sb.Append(linhas[i]);
            */
            foreach (string linha in linhas.Values)
            {
                sb.Append(linha);
            }
            sb.Append("</tbody>");
            sb.Append("</table>");
            anota("]");

        }
        private void relatorioPessoa_old(StringBuilder sb, int idCorp, int idEmp, string tipoRelatorio)
        {
            //pesquisa dados
            //tipos:
            //'cliente', 'fornecedor', 'transportador', 'funcionario', 'parceiro'

            string nomeEmpresa = "Empresa " + idEmp.ToString();

            //

            sb.Append("<table class='tabela'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='2'>{0}</th>", nomeEmpresa);
            sb.AppendFormat("<th scope='col' colspan='3'>relatório de {0}</th>", tipoRelatorio);
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.Append("<th scope='col'>cod</th>");
            sb.Append("<th scope='col'>cpf/cnpj</th>");
            sb.Append("<th scope='col'>nome</th>");
            sb.Append("<th scope='col'>cidade</th>");
            sb.Append("<th scope='col'>contatos</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("<tbody>");
            for (int i = 0; i < 100; i++)
            {
                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", i);
                sb.AppendFormat("<td>{0}</td>", i + 1);
                sb.AppendFormat("<td>{0}</td>", i + 2);
                sb.AppendFormat("<td>{0}</td>", i + 3);
                sb.AppendFormat("<td>{0}</td>", i + 4);
                sb.Append("</tr>");
            }
            sb.Append("</tbody>");
            sb.Append("</table>");

        }
        private void relatorioMovResumos(StringBuilder sb, int idCorp, int idEmp, string strDtComparacao)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            Dictionary<string, List<Cx_Lancamento>> dictLancamentos = new Dictionary<string,List<Cx_Lancamento>>();
            List<Mov> listaMov = new List<Mov>();
            List<Mov> listaMovRecebimentos = new List<Mov>();
            List<Cx_Lancamento> listaCxLRecebimentos = new List<Cx_Lancamento>();
            List<Cx_Lancamento> listaCxLRetiradas = new List<Cx_Lancamento>();
            List<Cx_Lancamento> listaCxLEntradas = new List<Cx_Lancamento>();

            IQuery query;

            foreach (Cx_Lancamento cxL in db.Query<Cx_Lancamento>().OrderBy(item => item.id))
            {
                if (cxL.dthr != null && cxL.dthr.StartsWith(strDtComparacao))
                {
                    string nomeGrupo = (cxL.grupoTipoPagamento_nome == null) ? "OUTROS" : cxL.grupoTipoPagamento_nome;
                    if (!dictLancamentos.ContainsKey(nomeGrupo))
                        dictLancamentos.Add(nomeGrupo, new List<Cx_Lancamento>());
                    dictLancamentos[nomeGrupo].Add(cxL);
                }
            }

            Cx_Diario cxD = null;
            query = db.Query();
            query.Constrain(typeof(Cx_Diario));
            query.Descend("data").Constrain(strDtComparacao);
            if (query.Execute().Count == 0)
                cxD = new Cx_Diario();
            else
            {
                foreach (Cx_Diario xxx in query.Execute())
                {
                    if (xxx.idEmp == idEmp)
                        cxD = xxx;
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size: 12px;'>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th style='font-size: 12px;'>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size: 12px;'>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th style='font-size: 12px;'>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size: 12px;'>{0}</th>", "RESUMO DE CAIXA");
            sb.AppendFormat("<th style='font-size: 12px;'>Data: {0}</th>", strDtComparacao);
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size: 12px; font-weight:bold'>SALDO DO CAIXA: {0}</th>", formatMoney(Decimal.Parse(cxD.saldo.ToString()), true));
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.Append("<th scope='col' style='font-size: 12px;'>Resumo</th>");
            sb.Append("<th scope='col' style='font-size: 12px;'>Valor</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");

            double totalDinheiro = 0;
            double totalResumo = 0;
            for (int i = 0; i < dictLancamentos.Count; i++)
            {
                string grupo = dictLancamentos.ElementAt(i).Key;
                List<Cx_Lancamento> listaLancamentos = dictLancamentos.ElementAt(i).Value;

                double valorCobrado = 0;
                foreach (Cx_Lancamento cxL in listaLancamentos)
                {
                    Mov mov = null;
                    query = db.Query();
                    query.Constrain(typeof(Mov));
                    query.Descend("idOperacao").Constrain(cxL.idOperacao);
                    if (query.Execute().Count > 0)
                    {
                        mov = query.Execute()[0] as Mov;
                        if (mov.idMovCanceladora == 0 && mov.tipo == EMovTipo.saida_venda)
                        {
                            valorCobrado += cxL.valorRecebido;
                            if (cxL.tipo == ECxLancamentoTipo.venda)
                                if (!listaMov.Contains(mov))
                                    listaMov.Add(mov);
                            //if (cxL.tipo == ECxLancamentoTipo.recebimento && cxL.situacao == ECxLancamentoSituacao.lancado)
                            //listaMovRecebimentos.Add(mov);
                        }
                    }
                    if (cxL.tipo == ECxLancamentoTipo.recebimento && cxL.situacao == ECxLancamentoSituacao.lancado)
                        listaCxLRecebimentos.Add(cxL);
                    if (cxL.tipo == ECxLancamentoTipo.retirada && cxL.situacao == ECxLancamentoSituacao.lancado)
                        listaCxLRetiradas.Add(cxL);
                    if (cxL.tipo == ECxLancamentoTipo.entrada && cxL.situacao == ECxLancamentoSituacao.lancado)
                        listaCxLEntradas.Add(cxL);
                }

                if (valorCobrado > 0)
                {
                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size: 12px;'>{0}</td>", grupo);
                    sb.AppendFormat("<td style='font-size: 12px;'>R$ {0}</td>", formatMoney(Convert.ToDecimal(valorCobrado), false));
                    sb.Append("</tr>");

                    totalResumo += valorCobrado;

                    if (grupo == "DINHEIRO")
                        totalDinheiro = valorCobrado;
                    if (grupo == "A VISTA")
                        totalDinheiro += valorCobrado;
                }
            }

            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size: 12px; font-weight:bold'>TOTAL RESUMO: {0}</th>", formatMoney(Decimal.Parse(totalResumo.ToString()), true));
            sb.Append("</tr>");
            sb.Append("</table>");

            if (listaMov.Count > 0)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 12px;'>{0}</th>", "MOVIMENTAÇÕES");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Cod</th>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Cliente</th>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Data/Hora</th>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Valor Bruto</th>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Valor Desconto</th>");
                sb.Append("<th scope='col' style='font-size: 10px;'>Valor Liquido</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");

                foreach (Mov mov in listaMov.OrderBy(item => StringToDateTime(item.dthrMovEmissao)))
                {
                    mov.vlrAcrescimo = -mov.vlrAcrescimo;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", mov.id);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", mov.cliente_nome);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", mov.dthrMovEmissao);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(mov.vlrItensInicial.ToString()), true));
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(mov.vlrAcrescimo.ToString()), true));
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(mov.vlrItensFinal.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            if (listaCxLRecebimentos.Count > 0)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 12px;'>{0}</th>", "RECEBIMENTOS");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.Append("<th scope='col' style='width:5%; font-size:10px;'>Cod</th>");
                sb.Append("<th scope='col' style='width:25%; font-size:10px;'>Cliente</th>");
                sb.Append("<th scope='col' style='width:18%; font-size:10px;'>Data/Hora</th>");
                sb.Append("<th scope='col' style='width:12%; font-size:10px;'>Valor</th>");
                sb.Append("<th scope='col' style='width:40%; font-size:10px;'>Histórico</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");

                foreach (Cx_Lancamento cxL in listaCxLRecebimentos.OrderBy(item => StringToDateTime(item.dthr)))
                {
                    Mov mov = null;
                    query = db.Query();
                    query.Constrain(typeof(Mov));
                    query.Descend("idTransacao").Constrain(cxL.idTransacao);
                    mov = query.Execute()[0] as Mov;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.id);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", mov.cliente_nome);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.dthr);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(cxL.valorRecebido.ToString()), true));
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.observacoes);
                    sb.Append("</tr>");

                    totalDinheiro += cxL.valorCobrado;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            if (listaCxLEntradas.Count > 0)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 12px;'>{0}</th>", "ENTRADAS");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.Append("<th scope='col' style='width:5%; font-size:10px;'>Cod</th>");
                sb.Append("<th scope='col' style='width:18%; font-size:10px;'>Data/Hora</th>");
                sb.Append("<th scope='col' style='width:12%; font-size:10px;'>Valor</th>");
                sb.Append("<th scope='col' style='width:40%; font-size:10px;'>Histórico</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");

                foreach (Cx_Lancamento cxL in listaCxLEntradas)
                {
                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.id);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.dthr);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(cxL.valorRecebido.ToString()), true));
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.observacoes);
                    sb.Append("</tr>");

                    totalDinheiro += cxL.valorRecebido;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            double totalRetiradas = 0;
            if (listaCxLRetiradas.Count > 0)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 12px;'>{0}</th>", "RETIRADAS");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.Append("<th scope='col' style='width:5%; font-size:10px;'>Cod</th>");
                sb.Append("<th scope='col' style='width:25%; font-size:10px;'>Centro Custo</th>");
                sb.Append("<th scope='col' style='width:18%; font-size:10px;'>Data/Hora</th>");
                sb.Append("<th scope='col' style='width:12%; font-size:10px;'>Valor</th>");
                sb.Append("<th scope='col' style='width:40%; font-size:10px;'>Histórico</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");

                foreach (Cx_Lancamento cxL in listaCxLRetiradas)
                {
                    Finan_Lancamento finanLancamento = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_Lancamento));
                    query.Descend("idTransacao").Constrain(cxL.idTransacao);
                    finanLancamento = query.Execute()[0] as Finan_Lancamento;

                    Finan_TipoLancamento finanTipoLancamento = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_TipoLancamento));
                    query.Descend("id").Constrain(finanLancamento.idTipoLancamento);
                    finanTipoLancamento = query.Execute()[0] as Finan_TipoLancamento;

                    /*
                    Finan_CentroCusto finanCentroCusto = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_CentroCusto));
                    query.Descend("id").Constrain(finanLancamento.idCentroCusto);
                    finanCentroCusto = query.Execute()[0] as Finan_CentroCusto;
                     * */

                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.id);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", finanTipoLancamento.nomeTipoLancamento);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.dthr);
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", formatMoney(Decimal.Parse(cxL.valorCobrado.ToString()), true));
                    sb.AppendFormat("<td style='font-size: 10px;'>{0}</td>", cxL.observacoes);
                    sb.Append("</tr>");

                    totalRetiradas += cxL.valorCobrado;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            totalDinheiro += cxD.saldo;

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("</tr>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>TOTAL EM ESPECIE: {0}</th>", formatMoney(Decimal.Parse((totalDinheiro - totalRetiradas).ToString()), true));
            sb.Append("</tr>");
            sb.Append("</table>");



            #region antigo

            /*

            Dictionary<string, double> totalLancamentosPorGrupo = new Dictionary<string, double>();

            //throw new ExcecaoSDE(strDtComparacao);

            //List<Mov> cxLancamentos = new List<Mov>();
            IQuery q = db.Query();
            q.Constrain(typeof(Cx_Lancamento));
            q.Descend("id").OrderAscending();
            //q.Descend("dthr").Constraints().StartsWith(false);
            foreach (Cx_Lancamento xxx in q.Execute())
            {
                //string xxxDt = Utils.DateTimeParseBR(xxx.dthr).Date.ToString();
                if (xxx.dthr != null && xxx.dthr.StartsWith(strDtComparacao))
                //if (longDtInicial < xxxDtHr && xxxDtHr < longDtFinal)
                {
                    //Console.Beep();
                    string nome = (xxx.grupoTipoPagamento_nome == null) ? "outros" : xxx.grupoTipoPagamento_nome;
                    if (!totalLancamentosPorGrupo.ContainsKey(nome))
                        totalLancamentosPorGrupo.Add(nome, 0);
                    totalLancamentosPorGrupo[nome] += xxx.valorCobrado;
                    //if (lancamentosPorGrupo[xxx.grupoTipoPagamento_nome]
                    //lancamentosPorGrupo.Add(xxx.grupoTipoPagamento_nome,xxx);
                    //sb.AppendLine("<h1>" + xxx.id + " . " + xxx.dthrMovEmissao + "</h1>");
                }
                try
                {
                }
                catch
                {
                }
            }
            //


            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_empresa = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_empresa = xxx;
                    break;
                }










            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th colspan='2'>{0}</th>", (cli_empresa.apelido_razsoc == "") ? cli_empresa.nome : cli_empresa.apelido_razsoc);
            //sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_empresa.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='2'>Relatório de Caixa, {0}</th>", strDtComparacao);
            sb.Append("</tr>");
            /*
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='2'>Número: {0}</th>", mov.id.ToString());
            sb.AppendFormat("<th scope='col' colspan='2'>Data: {0}</th>", mov.dthrMovEmissao.Substring(0, 10));
            sb.AppendFormat("<th scope='col' colspan='4'>Vendedor: {0}</th>", cli_funcionario.nome);
            sb.Append("</tr>");
             * *-/
            sb.Append("<tr>");
            sb.Append("<th scope='col'>Resumo</th>");
            sb.Append("<th scope='col'>Valor</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");

            sb.Append("<tbody>");
            foreach (string nomeGrupo in totalLancamentosPorGrupo.Keys)
            {
                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", nomeGrupo);
                sb.AppendFormat("<td>R$ {0}</td>", formatMoney(Convert.ToDecimal(totalLancamentosPorGrupo[nomeGrupo]), false));
                sb.Append("</tr>");
            }
            sb.Append("</tbody>");
            sb.Append("</table>");

            * */

            #endregion

        }
        private void relatorioMov(StringBuilder sb, int idCorp, int idEmp, int idMov)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            Mov mov = null;
            foreach (Mov xxx in db.Query<Mov>())
                if (xxx.id == idMov)
                {
                    mov = xxx;
                    break;
                }
            //
            List<MovItem> carrinho = new List<MovItem>();
            foreach (MovItem xxx in db.Query<MovItem>())
                if (xxx.idMov == mov.id)
                    carrinho.Add(xxx);
            //
            List<Cx_Lancamento> cxLancamentos = new List<Cx_Lancamento>();
            if (mov.tipo == EMovTipo.saida_venda)
            {
                IQuery q = db.Query();
                q.Constrain(typeof(Cx_Lancamento));
                q.Descend("id").OrderAscending();
                foreach (Cx_Lancamento xxx in q.Execute())
                {
                    if (xxx.idOperacao == mov.idOperacao)
                        cxLancamentos.Add(xxx);
                }
            }
            List<Orcamento_Lancamento> orcamentoLancamentos = new List<Orcamento_Lancamento>();
            if (mov.tipo == EMovTipo.outros_orcamento)
            {
                IQuery q = db.Query();
                q.Constrain(typeof(Orcamento_Lancamento));
                q.Descend("id").OrderAscending();
                foreach (Orcamento_Lancamento xxx in q.Execute())
                {
                    if (xxx.idOperacao == mov.idOperacao)
                        orcamentoLancamentos.Add(xxx);
                }
            }

            //
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_empresa = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_empresa = xxx;
                    break;
                }
            //
            Cliente cli_funcionario = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == mov.idClienteFuncionarioVendedor)
                {
                    cli_funcionario = xxx;
                    break;
                }
            //
            Cliente cli = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == mov.idCliente)
                {
                    cli = xxx;
                    break;
                }
            //

            List<ClienteEndereco> cli_enderecos = new List<ClienteEndereco>();
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
            {
                if (xxx.idCliente == cli.id)
                    cli_enderecos.Add(xxx);
                if (xxx.idCliente == cli_empresa.id)
                    cli_empresa_enderecos.Add(xxx);
            }
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_empresa.id)
                    cli_empresa_contatos.Add(xxx);

            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());
            //

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>{0}</th>", "NAO E VALIDO COMO DOCUMENTO FISCAL");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>{0}</th>", "NAO ACOBERTA MERCADORIA PARA DEVOLUCAO OU TROCA");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_empresa.apelido_razsoc == "") ? cli_empresa.nome : cli_empresa.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_empresa.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>{0}</th>", defineTipoImpressao(mov.impressao));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='2'>Número: {0}</th>", mov.id.ToString());
            sb.AppendFormat("<th scope='col' colspan='2'>Data: {0}</th>", mov.dthrMovEmissao.Substring(0, 10));
            //throw new Exception("id: " + cli_funcionario.id + "nome: " + cli_funcionario.nome);
            sb.AppendFormat("<th scope='col' colspan='4'>Vendedor: {0}</th>", cli_funcionario.nome);
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='4'>Cliente: {0} -     {1}</th>", cli.id, (cli.tipo == EPesTipo.Juridica) ? (cli.apelido_razsoc == "") ? cli.nome : cli.apelido_razsoc : cli.nome);
            sb.AppendFormat("<th scope='col' colspan='3'>Contato: {0}</th>", mov.cliente_contato);
            sb.AppendFormat("<th scope='col' colspan='2'>{0}</th>", formata_cpf_cnpj(mov.cliente_cpf));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>Endereço: {0}</th>", mov.cliente_endereco_faturamento);
            //(cli_enderecos.Count > 0)?
            //cli_enderecos[0].logradouro + ", Nº" + cli_enderecos[0].numero + ", " + cli_enderecos[0].bairro + " - " + cli_enderecos[0].cidade + "-" + cli_enderecos[0].uf + " / " + ((cli_enderecos[0].inscr == "") ? "" : "Insc. Est: " + cli_enderecos[0].inscr) : "");
            //sb.AppendFormat("<th scope='col' colspan='2'>CEP: {0}</th>", "aaaaaa");//(cli_enderecos.Count > 0)?cli_enderecos[0].cep:"");
            sb.Append("</tr>");
            sb.Append("<th scope='col'>Cod.</th>");
            sb.Append("<th scope='col'>Cod. Aux.</th>");
            sb.Append("<th scope='col'>Cod. Un.</th>");
            sb.Append("<th scope='col'>Descrição</th>");
            sb.Append("<th scope='col'>Grade/Ident.</th>");
            sb.Append("<th scope='col'>Unid. Med.</th>");
            sb.Append("<th scope='col'>Quantidade</th>");
            sb.Append("<th scope='col'>Prc. Unit.</th>");
            sb.Append("<th scope='col'>Prc. Total</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");

            sb.Append("<tbody>");
            foreach (MovItem mi in carrinho)
            {
                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", mi.idItem);
                sb.AppendFormat("<td>{0}</td>", mi.rf_unica/*mi.__item.rfUnica*/);
                sb.AppendFormat("<td>{0}</th>", mi.rf_auxiliar/*mi.__item.rfAuxiliar*/);
                sb.AppendFormat("<td>{0}</td>", mi.item_nome);
                sb.AppendFormat("<td>{0}</td>", mi.estoque_identificador);
                sb.AppendFormat("<td>{0}</td>", mi.unid_med/*mi.__item.unidMed*/);
                sb.AppendFormat("<td>{0}</td>", mi.qtd.ToString());
                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaFinal.ToString()), false));
                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse((mi.vlrUnitVendaFinal * mi.qtd).ToString()), false));
                sb.Append("</tr>");
            }
            sb.Append("</tbody>");
            sb.Append("</table>");

            double pctDesconto = 0;
            if (mov.vlrItensInicial != 0)
                pctDesconto = (mov.vlrItensInicial - mov.vlrItensFinal) * 100 / mov.vlrItensInicial;
            if (pctDesconto < 0)
                pctDesconto = 0;

            if (cxLancamentos.Count > 0 || orcamentoLancamentos.Count > 0)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 14px;'>{0}</th>", "FORMA DE PAGAMENTO");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("</tr>");
                sb.Append("<th scope='col' style='width:34%;'>Forma de Pagamento</th>");
                sb.Append("<th scope='col' style='width:33%;'>Data Vencimento</th>");
                sb.Append("<th scope='col' style='width:33%;'>Valor</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");

                if (mov.tipo == EMovTipo.saida_venda)
                {
                    foreach (Cx_Lancamento cxl in cxLancamentos)
                    {
                        sb.Append("<tr>");
                        sb.AppendFormat("<td>{0}</td>", cxl.tipoPagamento_nome);
                        sb.AppendFormat("<td>{0}</td>", cxl.dtPagamento);
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Convert.ToDecimal(cxl.valorCobrado), false));
                        sb.Append("</tr>");
                    }
                }
                else if (mov.tipo == EMovTipo.outros_orcamento)
                {
                    foreach (Orcamento_Lancamento orcamentoL in orcamentoLancamentos)
                    {
                        sb.Append("<tr>");
                        sb.AppendFormat("<td>{0}</td>", orcamentoL.tipoPagamento_nome);
                        sb.AppendFormat("<td>{0}</td>", orcamentoL.dtPagamento);
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Convert.ToDecimal(orcamentoL.valorCobrado), false));
                        sb.Append("</tr>");
                    }
                }


                sb.Append("</table>");
            }

            double valorDesconto = mov.vlrItensInicial - mov.vlrItensFinal;
            if (valorDesconto < 0)
                valorDesconto = 0;

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            if (valorDesconto == 0)
                sb.AppendFormat("<th scope='col' colspan='2'>Val. Prod.: {0}</tr>", formatMoney(Decimal.Parse(mov.vlrItensFinal.ToString()), false));
            else
                sb.AppendFormat("<th scope='col' colspan='2'>Val. Prod.: {0}</tr>", formatMoney(Decimal.Parse(mov.vlrItensInicial.ToString()), false));
            sb.AppendFormat("<th scope='col' colspan='1'>Desc.(%): {0}%</th>", Math.Round(pctDesconto, 2));
            sb.AppendFormat("<th scope='col' colspan='2'>Desc.(R$): {0}</th>", formatMoney(Decimal.Parse(valorDesconto.ToString()), false));
            sb.AppendFormat("<th scope='col' colspan='3'>Val. Total c/ Desc.: {0}</th>", formatMoney(Decimal.Parse(mov.vlrItensFinal.ToString()), false));
            sb.Append("</tr>");
            /*sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>Forma de Pagamento: {0}</th>", "DEFINIR");
            sb.Append("</tr>");*/
            sb.Append("<tr>");
            sb.AppendFormat("<th scope='col' colspan='9'>OBS: {0}</th>", mov.obs);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            if (mov.tipo == EMovTipo.outros_orcamento)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.AppendFormat("<tr><th>Validade: {0}</th></tr>", mov.validadeDias + " DIAS");
                if (mov.entrega != "" && mov.entrega != null)
                    sb.AppendFormat("<tr><th>Entrega: {0}</th></tr>", mov.entrega);
                if (mov.frete != "" && mov.frete != null)
                    sb.AppendFormat("<tr><th>Frete: {0}</th></tr>", mov.frete);
                if (mov.impostos != "" && mov.impostos != null)
                    sb.AppendFormat("<tr><th>Impostos: {0}</th></tr>", mov.impostos);
                sb.Append("</thead>");
                sb.Append("</table>");
            }

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead>");
            sb.Append("<br/><br/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", "______________________________________________________");
            sb.Append("</tr>");
            sb.Append("<tr>");
            //sb.AppendFormat("<th>{0}</th>", "Assinatura do Cliente");
            sb.AppendFormat("<th>{0}</th>", mov.cliente_nome);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioMovDiario(StringBuilder sb, int idCorp, int idEmp, int idCliente, int idFuncionario, int idItem, string dataInicio, string dataFim, string tipoMov)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            //
            List<Mov> listaMov = new List<Mov>();
            IQuery query = db.Query();
            query.Constrain(typeof(Mov));
            query.Descend("dthrMovEmissao").OrderAscending();

            /*
            foreach (Mov xxx in query.Execute())
                if (xxx.dthrMovEmissao != null)
                    if (xxx.dthrMovEmissao.StartsWith(dataInicio))
                        mov_diario.Add(xxx);
             * */

            //Realiza todos as filtragens de resultado
            foreach (Mov xxx in query.Execute())
                if (xxx.dthrMovEmissao != null)
                    //Movimentações dentro do período informado
                    if (StringToDateTime(xxx.dthrMovEmissao) >= StringToDateTime(dataInicio) && StringToDateTime(xxx.dthrMovEmissao) <= StringToDateTime(dataFim))
                    {
                        //Sem cliente selecionado
                        if (idCliente == 0)
                        {
                            if (tipoMov == "Todos")
                            {
                                if (idFuncionario == 0)
                                    listaMov.Add(xxx);
                                else
                                    if (xxx.idClienteFuncionarioVendedor == idFuncionario)
                                        listaMov.Add(xxx);
                            }
                            else
                                if (xxx.tipo == getMovTipo(tipoMov))
                                {
                                    if (idFuncionario == 0)
                                        listaMov.Add(xxx);
                                    else
                                        if (xxx.idClienteFuncionarioVendedor == idFuncionario)
                                            listaMov.Add(xxx);
                                }
                        }
                        else
                        {
                            //Movimentações do cliente selecionado
                            if (xxx.idCliente == idCliente)
                                if (tipoMov == "Todos")
                                {
                                    if (idFuncionario == 0)
                                        listaMov.Add(xxx);
                                    else
                                        if (xxx.idClienteFuncionarioVendedor == idFuncionario)
                                            listaMov.Add(xxx);
                                }
                                else
                                    if (xxx.tipo == getMovTipo(tipoMov))
                                    {
                                        if (idFuncionario == 0)
                                            listaMov.Add(xxx);
                                        else
                                            if (xxx.idClienteFuncionarioVendedor == idFuncionario)
                                                listaMov.Add(xxx);
                                    }
                        }

                    }
            //
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());
            //

            Cliente cliente = null;
            if (idCliente > 0)
            {
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(idCliente);
                cliente = query.Execute()[0] as Cliente;
            }

            Cliente vendedor = null;
            if (idFuncionario > 0)
            {
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(idFuncionario);
                vendedor = query.Execute()[0] as Cliente;
            }

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("<tr>");
            sb.AppendFormat("<th>Relatório de Movimentações no período de {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cliente: {0}</th>", (cliente != null) ? cliente.nome : "TODOS");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Vendedor: {0}</th>", (vendedor != null) ? vendedor.nome : "TODOS");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            double valor_total_diario_bruto = 0;
            double valor_total_diario_liquido = 0;
            double valor_total_diario_custo = 0;

            foreach (Mov mov in listaMov)
            {
                if (idCliente != 0)
                    if (mov.idCliente != idCliente)
                        continue;

                double valor_total_mov = 0;

                query = db.Query();
                query.Constrain(typeof(MovItem));
                query.Descend("idMov").Constrain(mov.id);

                bool exiteItem = (idItem == 0) ? true : false;
                foreach (MovItem mi in query.Execute())
                {
                    if (mi.idItem != idItem)
                        continue;
                    exiteItem = true;
                    break;
                }
                if (!exiteItem)
                    continue;

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Cód. Movimentação: {0}</td>", mov.id);
                sb.AppendFormat("<td>Data/Hora: {0}</td>", mov.dthrMovEmissao);
                sb.AppendFormat("<td>Tipo Movimentação: {0}</td>", tipoMovNome(mov));
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("</tr>");
                sb.Append("<th scope='col'>Cód.</th>");
                sb.Append("<th scope='col'>Item</th>");
                sb.Append("<th scope='col'>Quantidade</th>");
                sb.Append("<th scope='col'>Grade/Ident.</th>");
                sb.Append("<th scope='col'>Vlr.Unit.</th>");
                sb.Append("<th scope='col'>Vlr. Bruto</th>");
                sb.Append("<th scope='col'>Vlr Desc.</th>");
                sb.Append("<th scope='col'>Vlr. Final</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (MovItem mi in query.Execute())
                {
                    if (idItem > 0)
                        if (mi.idItem != idItem)
                            continue;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='width:20;'>{0}</td>", mi.idItem);
                    sb.AppendFormat("<td>{0}</td>", mi.item_nome);
                    sb.AppendFormat("<td>{0}</td>", mi.qtd);
                    sb.AppendFormat("<td>{0}</td>", mi.estoque_identificador);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaInicial.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse((mi.vlrUnitVendaInicial * mi.qtd).ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mi.vlrDesc.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaFinalQtd.ToString()), true));
                    sb.Append("</tr>");

                    valor_total_mov += mi.vlrUnitVendaFinalQtd;
                    valor_total_diario_bruto += mi.vlrUnitVendaInicial * mi.qtd;
                    valor_total_diario_custo += mi.vlrUnitCusto * mi.qtd;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Total da Movimentação: {0}</td>", formatMoney(Decimal.Parse(valor_total_mov.ToString()), true));
                sb.Append("</tr>");
                sb.Append("</table>");

                valor_total_diario_liquido += valor_total_mov;
            }

            sb.Append("<table class='tabela'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.Append("<br/><br/>");
            sb.AppendFormat("<td>Total Bruto: {0}</td>", formatMoney(Decimal.Parse(valor_total_diario_bruto.ToString()), true));
            sb.AppendFormat("<td>Total Liquido: {0}</td>", formatMoney(Decimal.Parse(valor_total_diario_liquido.ToString()), true));
            sb.AppendFormat("<td>Total custo: {0}</td>", formatMoney(Decimal.Parse(valor_total_diario_custo.ToString()), true));
            sb.AppendFormat("<td>Lucro: {0}</td>", formatMoney(Decimal.Parse((valor_total_diario_liquido - valor_total_diario_custo).ToString()), true));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioSimplesVendasPorPeriodo(StringBuilder sb, int idCorp, int idEmp, int idItem, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            //
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            List<Mov> listaMov = new List<Mov>();
            IQuery query = db.Query();
            query.Constrain(typeof(Mov));
            //
            foreach (Mov xxx in query.Execute())
                if (xxx.dthrMovEmissao != null)
                    if (StringToDateTime(xxx.dthrMovEmissao) >= StringToDateTime(dataInicio) && StringToDateTime(xxx.dthrMovEmissao) <= StringToDateTime(dataFim))
                        if (xxx.tipo == EMovTipo.saida_venda || xxx.tipo == EMovTipo.outros_pedido || xxx.tipo == EMovTipo.nfs_prefeitura)
                            if (xxx.idMovCancelada == 0 && xxx.idMovCanceladora == 0)
                                listaMov.Add(xxx);

            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());
            //

            List<MovItem> listaItens = new List<MovItem>();
            bool existe;

            foreach (Mov mov in listaMov)
            {
                query = db.Query();
                query.Constrain(typeof(MovItem));
                query.Descend("idMov").Constrain(mov.id);

                foreach (MovItem mi in query.Execute())
                {
                    if (listaItens.Count == 0)
                    {
                        listaItens.Add(mi);
                        continue;
                    }

                    List<MovItem> lista_percorre = new List<MovItem>(listaItens);

                    existe = false;
                    for (int i = 0; i < lista_percorre.Count; i++)
                    //foreach (MovItem mil in lista_percorre)
                    {
                        if (mi.idItem != lista_percorre[i].idItem || mi.estoque_identificador != lista_percorre[i].estoque_identificador)
                            continue;

                        listaItens.RemoveAt(i);

                        existe = true;
                        mi.qtd += lista_percorre[i].qtd;
                        mi.vlrUnitVendaFinalQtd += lista_percorre[i].vlrUnitVendaFinalQtd;

                        listaItens.Add(mi);
                    }

                    if (!existe)
                        listaItens.Add(mi);
                }
            }

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("<tr>");
            sb.AppendFormat("<th>Relatório de Produtos Vendidos no período de {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            double qtdTotal = 0;
            double vlrTotal = 0;
            IEnumerable<MovItem> ls = listaItens.OrderBy(item => item.item_nome);

            bool exiteItem = (idItem == 0) ? true : false;
            foreach (MovItem mi in ls)
            {
                if (mi.idItem != idItem)
                    continue;
                exiteItem = true;
                break;
            }
            if (exiteItem)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("</tr>");
                sb.Append("<th scope='col'>Cód.</th>");
                sb.Append("<th scope='col'>Item</th>");
                sb.Append("<th scope='col'>Cód. Única</th>");
                sb.Append("<th scope='col'>Cód. Aux.</th>");
                sb.Append("<th scope='col'>Grade/Ident.</th>");
                sb.Append("<th scope='col'>Quantidade</th>");
                sb.Append("<th scope='col'>Vlr. Total</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (MovItem mi in ls)
                {
                    if (idItem > 0)
                        if (mi.idItem != idItem)
                            continue;

                    query = db.Query();
                    query.Constrain(typeof(Item));
                    query.Descend("id").Constrain(mi.idItem);
                    Item item = query.Execute()[0] as Item;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", item.id);
                    sb.AppendFormat("<td>{0}</td>", mi.item_nome);
                    sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                    sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                    sb.AppendFormat("<td>{0}</td>", mi.estoque_identificador);
                    sb.AppendFormat("<td>{0}</td>", mi.qtd);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaFinalQtd.ToString()), true));
                    sb.Append("</tr>");

                    qtdTotal += mi.qtd;
                    vlrTotal += mi.vlrUnitVendaFinalQtd;
                }
                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            sb.Append("<table class='tabela'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.Append("<br/>");
            sb.AppendFormat("<th>Quantidade vendida no período: {0}<th>", qtdTotal.ToString());
            sb.AppendFormat("<th>Valor total do período: {0}</th>", formatMoney(Decimal.Parse(vlrTotal.ToString()), true));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioOrdemServico(StringBuilder sb, int idCorp, int idEmp, int idOrdemServico)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            OrdemServico os = null;
            foreach (OrdemServico xxx in db.Query<OrdemServico>())
            {
                if (xxx.id != idOrdemServico)
                    continue;

                os = xxx;
                break;
            }
            //
            List<OrdemServico_Item> losi = new List<OrdemServico_Item>();
            foreach (OrdemServico_Item xxx in db.Query<OrdemServico_Item>())
                if (xxx.idOrdemServico == os.id)
                    losi.Add(xxx);
            //
            OrdemServico_Tipo tipoOS = null;
            IQuery query = db.Query();
            query.Constrain(typeof(OrdemServico_Tipo));
            query.Descend("id").Constrain(os.idOrdemServicoTipo);
            tipoOS = query.Execute()[0] as OrdemServico_Tipo;

            //
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_empresa = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_empresa = xxx;
                    break;
                }

            //
            Cliente cli_funcionario = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == os.idClienteFuncionarioLogado)
                {
                    cli_funcionario = xxx;
                    break;
                }
            //
            Cliente cli = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == os.idCliente)
                {
                    cli = xxx;
                    break;
                }
            //

            List<ClienteEndereco> cli_enderecos = new List<ClienteEndereco>();
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
            {
                if (xxx.idCliente == cli.id)
                    cli_enderecos.Add(xxx);
                if (xxx.idCliente == cli_empresa.id)
                    cli_empresa_enderecos.Add(xxx);
            }
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_empresa.id)
                    cli_empresa_contatos.Add(xxx);

            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            List<OrdemServico_Item> listaItens = new List<OrdemServico_Item>();
            bool existe;

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_empresa.apelido_razsoc == "") ? cli_empresa.nome : cli_empresa.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_empresa.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Nº Servico: {0}</th>", os.id.ToString());
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Data Início: {0}</th>", os.dthrLancamento.Substring(0, 10));
            sb.AppendFormat("<th>Previsão: {0}</th>", os.dthrPrevisao.Substring(0, 10));
            sb.AppendFormat("<th>Vendedor: {0}</th>", cli_funcionario.nome);
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cliente: {0} -     {1}</th>", cli.id, os.cliente_nome);
            sb.AppendFormat("<th>Contato: {0}</th>", os.cliente_contato);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(os.cliente_cpf));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Endereço: {0}</th>", os.cliente_endereco_cobranca);
            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead/>");
            sb.Append("<tbody>");

            int contador = 0;

            if (tipoOS.veiculo)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Veículo: {0}</th>", os.veiculo);
                else
                    sb.AppendFormat("<th>Veículo: {0}</th></tr>", os.veiculo);
                contador++;
            }
            if (tipoOS.placa)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Placa: {0}</th>", os.placa);
                else
                    sb.AppendFormat("<th>Placa: {0}</th></tr>", os.placa);
                contador++;
            }
            if (tipoOS.kilometragem)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Kilometragem: {0}</th>", os.kilometragem);
                else
                    sb.AppendFormat("<th>Kilometragem: {0}</th></tr>", os.kilometragem);
                contador++;
            }
            if (tipoOS.numMotor)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Nº do Motor: {0}</th>", os.numMotor);
                else
                    sb.AppendFormat("<th>Nº do Motor: {0}</th></tr>", os.numMotor);
                contador++;
            }
            if (tipoOS.maquina)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Máquina: {0}</th>", os.maquina);
                else
                    sb.AppendFormat("<th>Máquina: {0}</th></tr>", os.maquina);
                contador++;
            }
            if (tipoOS.implAgricola)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Impl. Agrícola: {0}</th>", os.implAgricola);
                else
                    sb.AppendFormat("<th>Impl. Agrícola: {0}</th></tr>", os.implAgricola);
                contador++;
            }
            if (tipoOS.equipamento)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Equipamento: {0}</th>", os.equipamento);
                else
                    sb.AppendFormat("<th>Equipamento: {0}</th></tr>", os.equipamento);
                contador++;
            }
            if (tipoOS.numSerie)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Nº de Série: {0}</th>", os.numSerie);
                else
                    sb.AppendFormat("<th>Nº de Série: {0}</th></tr>", os.numSerie);
                contador++;
            }
            if (tipoOS.servico)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Serviço: {0}</th>", os.servico);
                else
                    sb.AppendFormat("<th>Serviço: {0}</th></tr>", os.servico);
                contador++;
            }
            if (tipoOS.defeitoReclamado)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Defeito Reclamado: {0}</th>", os.defeitoReclamado);
                else
                    sb.AppendFormat("<th>Defeito Reclamado: {0}</th></tr>", os.defeitoReclamado);
                contador++;
            }
            if (tipoOS.defeitoConstatado)
            {
                if (contador % 2 == 0)
                    sb.AppendFormat("<tr><th>Defeito Constatado: {0}</th></tr>", os.defeiroConstatado);
                else
                    sb.AppendFormat("<th>Defeito Constatado: {0}</th></tr>", os.defeiroConstatado);
            }


            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.Append("<th scope='col'>Item</th>");
            sb.Append("<th scope='col'>Qtd.</th>");
            sb.Append("<th scope='col'>Grade</th>");
            sb.Append("<th scope='col'>Vlr. Unitario</th>");
            sb.Append("<th scope='col'>Vlr. Total</th>");
            sb.Append("<th scope='col'>Executores</th>");
            sb.Append("<th scope='col'>Tipo</th>");
            sb.Append("</tr>");
            sb.Append("<thead>");
            sb.Append("<tbody>");

            foreach (OrdemServico_Item osi in losi)
            {
                String cExecutores = "";

                query = db.Query();
                query.Constrain(typeof(OrdemServico_Executor));
                query.Descend("idOrdemServicoItem").Constrain(osi.id);

                SortedList<int, string> linhas = new SortedList<int, string>();

                foreach (OrdemServico_Executor ose in query.Execute())
                {
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(ose.idClienteExecutor);
                    cExecutores += string.Format("{0}<br/>", ((Cliente)query.Execute()[0]).nome);
                }

                StringBuilder sb2 = new StringBuilder();
                sb2.Append("<tr>");
                sb2.AppendFormat("<td>{0}</td>", osi.item_nome);
                sb2.AppendFormat("<td>{0}</td>", osi.qtd);
                sb2.AppendFormat("<td>{0}</td>", osi.estoque_identificador);
                sb2.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(osi.vlrUnitVendaFinal.ToString()), true));
                sb2.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(osi.vlrUnitVendaFinalQtd.ToString()), true));
                sb2.AppendFormat("<td>{0}</td>", cExecutores);
                sb2.AppendFormat("<td>{0}</td>", defineTipoOrdemServico(osi.tipoItem));
                sb2.Append("</tr>");
                linhas.Add(osi.id, sb2.ToString());

                foreach (string linha in linhas.Values)
                    sb.Append(linha);

                if (listaItens.Count == 0)
                {
                    listaItens.Add(new OrdemServico_Item() { tipoItem = osi.tipoItem, vlrUnitVendaFinalQtd = osi.vlrUnitVendaFinalQtd });
                    continue;
                }

                List<OrdemServico_Item> lista_percorre = new List<OrdemServico_Item>(listaItens);

                existe = false;
                foreach (OrdemServico_Item osilp in lista_percorre)
                {
                    if (osilp.tipoItem != osi.tipoItem)
                        continue;

                    existe = true;
                    osilp.vlrUnitVendaFinalQtd += osi.vlrUnitVendaFinalQtd;
                }

                if (!existe)
                    listaItens.Add(new OrdemServico_Item() { tipoItem = osi.tipoItem, vlrUnitVendaFinalQtd = osi.vlrUnitVendaFinalQtd });
            }

            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("<tbody>");

            Double totalOS = 0;
            foreach (OrdemServico_Item osi in listaItens)
            {
                sb.Append("<tr>");
                sb.AppendFormat("<th>Total de {0}: {1}</th>", defineTipoOrdemServico(osi.tipoItem), formatMoney(Decimal.Parse(osi.vlrUnitVendaFinalQtd.ToString()), true));
                sb.Append("</tr>");
                totalOS += osi.vlrUnitVendaFinalQtd;
            }

            sb.Append("<tr>");
            sb.AppendFormat("<th>Total da Ordem de Serviço: {0}</th>", formatMoney(Decimal.Parse(totalOS.ToString()), true));
            sb.Append("</tr>");

            sb.Append("</tbody>");
            sb.Append("</table>");
        }
        private void relatorioListaPrecos(StringBuilder sb, int idCorp, int idEmp)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query = db.Query();
            query.Constrain(typeof(Item));
            query.Descend("grupo").OrderAscending();

            Dictionary<string, List<Item>> dict = new Dictionary<string, List<Item>>();
            List<Item> semGrupo = new List<Item>();
            dict.Add("SEM GRUPO", semGrupo);

            foreach (Item item in query.Execute())
            {
                if (item.grupo == null || item.grupo == "")
                    dict["SEM GRUPO"].Add(item);
                else if (dict.ContainsKey(item.grupo))
                    dict[item.grupo].Add(item);
                else
                {
                    dict.Add(item.grupo, new List<Item>());
                    dict[item.grupo].Add(item);
                }
            }
            if (dict.ElementAt(0).Value.Count == 0)
                dict.Remove("SEM GRUPO");

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "LISTA DE PREÇOS");
            sb.Append("</tr>");
            sb.Append("</table>");

            for (int i = 0; i < dict.Count; i++)
            {
                string grupo = dict.ElementAt(i).Key;
                IEnumerable<Item> ls = dict.ElementAt(i).Value.OrderBy(item => item.nome);

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Grupo: {0}</td>", grupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune' style='width:10%;'>Cód.</th>");
                sb.Append("<th scoupe='colune' style='width:45%;'>Item</th>");
                sb.Append("<th scoupe='colune' style='width:10%;'>Rf. Un.</th>");
                sb.Append("<th scoupe='colune' style='width:10%;'>Rf. Aux.</th>");
                sb.Append("<th scoupe='colune' style='width:10%;'>Unid. Med.</th>");
                sb.Append("<th scoupe='colune' style='width:15%;'>Preço Venda</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Item item in ls)
                {
                    if (item.desuso)
                        continue;

                    query = db.Query();
                    query.Constrain(typeof(ItemEmpPreco));
                    query.Descend("idItem").Constrain(item.id);
                    ItemEmpPreco iep = query.Execute()[0] as ItemEmpPreco;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", item.id);
                    sb.AppendFormat("<td>{0}</td>", item.nome);
                    sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                    sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                    sb.AppendFormat("<td>{0}</td>", item.unidMed);
                    sb.AppendFormat("<td style='auto:100'>{0}</td>", formatMoney(Decimal.Parse(iep.venda.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }
        }
        private void relatorioEstoquesComGrade(StringBuilder sb, int idCorp, int idEmp, bool mostraEstoqueZerado)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query = db.Query();
            query.Constrain(typeof(Item));
            query.Descend("grupo").OrderAscending();

            Dictionary<string, List<Item>> dict = new Dictionary<string, List<Item>>();
            List<Item> semGrupo = new List<Item>();
            dict.Add("SEM GRUPO", semGrupo);

            foreach (Item item in query.Execute())
            {
                if (item.grupo == null || item.grupo == "")
                    dict["SEM GRUPO"].Add(item);
                else if (dict.ContainsKey(item.grupo))
                    dict[item.grupo].Add(item);
                else
                {
                    dict.Add(item.grupo, new List<Item>());
                    dict[item.grupo].Add(item);
                }
            }
            if (dict.ElementAt(0).Value.Count == 0)
                dict.Remove("SEM GRUPO");

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "RELATÓRIO DE ESTOQUES COM GRADE");
            sb.Append("</tr>");
            sb.Append("</table>");

            for (int i = 0; i < dict.Count; i++)
            {
                string grupo = dict.ElementAt(i).Key;
                IEnumerable<Item> ls = dict.ElementAt(i).Value.OrderBy(item => item.nome);

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Grupo: {0}</td>", grupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                foreach (Item item in ls)
                {
                    if (item.desuso)
                        continue;

                    query = db.Query();
                    query.Constrain(typeof(ItemEmpEstoque));
                    query.Descend("idItem").Constrain(item.id);

                    double total_item = 0;
                    if (!mostraEstoqueZerado)
                    {
                        int contador = 0;
                        foreach (ItemEmpEstoque iee in query.Execute())
                        {
                            total_item += iee.qtd;
                            if (iee.qtd > 0)
                                contador++;
                        }
                            
                        if (contador == 0)
                            continue;
                    }

                    sb.Append("<table class='tabela_head'>");
                    sb.Append("<thead>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='width:40%;'>Item: {0}</th>", item.nome);
                    sb.AppendFormat("<th style='width:25%;'>Cód. Único: {0}</th>", item.rfUnica);
                    sb.AppendFormat("<th style='width:25%;'>Cód. Auxiliar: {0}</th>", item.rfAuxiliar);
                    sb.AppendFormat("<th style='width:10%;'>Total Item: {0}</th>", total_item);
                    sb.Append("</tr>");
                    sb.Append("</thead>");
                    sb.Append("</table>");

                    sb.Append("<table class='tabela_iee'>");
                    sb.Append("<thead>");
                    sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
                    sb.Append("<th scoupe='colune'>Qtd</th>");
                    sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
                    sb.Append("<th scoupe='colune'>Qtd</th>");
                    sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
                    sb.Append("<th scoupe='colune'>Qtd</th>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");

                    int cont = 0;
                    foreach (ItemEmpEstoque iee in query.Execute())
                    {
                        if (!mostraEstoqueZerado)
                           if (iee.qtd <= 0)
                                continue;

                        if (cont == 3)
                        {
                            sb.Append("</tr>");
                            cont = 0;
                        }
                        if (cont == 0)
                            sb.Append("<tr>");

                        sb.AppendFormat("<td style='width: 26%;'>{0}</td>", iee.identificador);
                        sb.AppendFormat("<td style='width: 6%;'>{0}</td>", iee.qtd);
                        cont++;
                    }

                    while (cont < 4)
                    {
                        sb.AppendFormat("<td style='width: 26%;'>{0}</td>", "");
                        sb.AppendFormat("<td style='width: 6%;'>{0}</td>", "");
                        cont++;
                    }

                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }
        }
        private void relatorioEstoquesSemGrade(StringBuilder sb, int idCorp, int idEmp, bool mostraEstoqueZerado)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query = db.Query();
            query.Constrain(typeof(Item));
            query.Descend("grupo").OrderAscending();

            Dictionary<string, List<Item>> dict = new Dictionary<string, List<Item>>();
            List<Item> semGrupo = new List<Item>();
            dict.Add("SEM GRUPO", semGrupo);

            foreach (Item item in query.Execute())
            {
                if (item.grupo == null || item.grupo == "")
                    dict["SEM GRUPO"].Add(item);
                else if (dict.ContainsKey(item.grupo))
                    dict[item.grupo].Add(item);
                else
                {
                    dict.Add(item.grupo, new List<Item>());
                    dict[item.grupo].Add(item);
                }
            }
            if (dict.ElementAt(0).Value.Count == 0)
                dict.Remove("SEM GRUPO");

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "RELATÓRIO DE ESTOQUES SEM GRADE");
            sb.Append("</tr>");
            sb.Append("</table>");

            double totalEstoque = 0;

            for (int i = 0; i < dict.Count; i++)
            {
                string grupo = dict.ElementAt(i).Key;
                IEnumerable<Item> ls = dict.ElementAt(i).Value.OrderBy(item => item.nome);

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Grupo: {0}</td>", grupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Item</th>");
                sb.Append("<th scoupe='colune'>Rf. Única</th>");
                sb.Append("<th scoupe='colune'>Rf. Aux.</th>");
                sb.Append("<th scoupe='colune'>Unid. Med.</th>");
                sb.Append("<th scoupe='colune'>Qtd</th>");
                sb.Append("<th scoupe='colune'>Preço Venda</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                double totalGrupo = 0;

                foreach (Item item in ls)
                {
                    if (item.desuso)
                        continue;

                    

                    query = db.Query();
                    query.Constrain(typeof(ItemEmpEstoque));
                    query.Descend("idItem").Constrain(item.id);

                    double qtd = 0;
                    foreach (ItemEmpEstoque iee in query.Execute())
                        qtd += iee.qtd;

                    if (!mostraEstoqueZerado)
                        if (qtd <= 0)
                            continue;

                    query = db.Query();
                    query.Constrain(typeof(ItemEmpPreco));
                    query.Descend("idItem").Constrain(item.id);

                    ItemEmpPreco iep = query.Execute()[0] as ItemEmpPreco;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", item.id);
                    sb.AppendFormat("<td style='width:350px;'>{0}</td>", item.nome);
                    sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                    sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                    sb.AppendFormat("<td>{0}</td>", item.unidMed);
                    sb.AppendFormat("<td>{0}</td>", qtd);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(iep.venda.ToString()), true));
                    sb.Append("</tr>");

                    totalGrupo += qtd;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Qtd Estoque do Grupo '{0}': {1}</td>", grupo, totalGrupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                totalEstoque += totalGrupo;
            }

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<td>Total de itens em estoque: {0}</td>", totalEstoque);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioListagemParaBalanco(StringBuilder sb, int idCorp, int idEmp)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query = db.Query();
            query.Constrain(typeof(Item));
            query.Descend("grupo").OrderAscending();

            Dictionary<string, List<Item>> dict = new Dictionary<string, List<Item>>();
            List<Item> semGrupo = new List<Item>();
            dict.Add("SEM GRUPO", semGrupo);

            foreach (Item item in query.Execute())
            {
                if (item.grupo == null || item.grupo == "")
                    dict["SEM GRUPO"].Add(item);
                else if (dict.ContainsKey(item.grupo))
                    dict[item.grupo].Add(item);
                else
                {
                    dict.Add(item.grupo, new List<Item>());
                    dict[item.grupo].Add(item);
                }
            }
            if (dict.ElementAt(0).Value.Count == 0)
                dict.Remove("SEM GRUPO");

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "RELATÓRIO DE ESTOQUES SEM GRADE");
            sb.Append("</tr>");
            sb.Append("</table>");

            for (int i = 0; i < dict.Count; i++)
            {
                string grupo = dict.ElementAt(i).Key;
                IEnumerable<Item> ls = dict.ElementAt(i).Value.OrderBy(item => item.nome);

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Grupo: {0}</td>", grupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Item</th>");
                sb.Append("<th scoupe='colune'>Rf. Única</th>");
                sb.Append("<th scoupe='colune'>Rf. Aux.</th>");
                sb.Append("<th scoupe='colune'>Unid. Med.</th>");
                sb.Append("<th scoupe='colune'>Qtd</th>");
                sb.Append("<th scoupe='colune'>Preço Venda</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Item item in ls)
                {
                    if (item.desuso)
                        continue;

                    query = db.Query();
                    query.Constrain(typeof(ItemEmpPreco));
                    query.Descend("idItem").Constrain(item.id);

                    ItemEmpPreco iep = query.Execute()[0] as ItemEmpPreco;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", item.id);
                    sb.AppendFormat("<td style='width:350px;'>{0}</td>", item.nome);
                    sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                    sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                    sb.AppendFormat("<td>{0}</td>", item.unidMed);
                    sb.AppendFormat("<td>{0}</td>", "_______________");
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(iep.venda.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Qtd Estoque do Grupo '{0}': {1}</td>", grupo, "_______________");
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");
            }

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<td>Total de itens em estoque: {0}</td>", "_______________");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioPisCofins(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            List<Mov> listaMov = new List<Mov>();
            IQuery query = db.Query();
            query.Constrain(typeof(Mov));
            query.Descend("dthrMovEmissao").OrderAscending();

            foreach (Mov xxx in query.Execute())
                if (xxx.dthrMovEmissao != null)
                    if (StringToDateTime(xxx.dthrMovEmissao) >= StringToDateTime(dataInicio) && StringToDateTime(xxx.dthrMovEmissao) <= StringToDateTime(dataFim))
                        if (xxx.tipo == EMovTipo.saida_venda || xxx.tipo == EMovTipo.nfs_prefeitura)
                            listaMov.Add(xxx);

            Dictionary<string, List<MovItem>> dict = new Dictionary<string, List<MovItem>>();
            List<MovItem> semGrupo = new List<MovItem>();
            dict.Add("SEM GRUPO", semGrupo);

            List<MovItem> listaMovItem = new List<MovItem>();
            List<ItemEmpEstoque> listaItemEmpEstoque = new List<ItemEmpEstoque>();
            foreach (Mov mov in listaMov)
            {
                query = db.Query();
                query.Constrain(typeof(MovItem));
                query.Descend("idMov").Constrain(mov.id);

                foreach (MovItem mi in query.Execute())
                {
                    query = db.Query();
                    query.Constrain(typeof(Item));
                    query.Descend("id").Constrain(mi.idItem);
                    Item item = query.Execute()[0] as Item;

                    if (item.grupo == "" || item.grupo == null)
                        dict["SEM GRUPO"].Add(mi);
                    else if (dict.ContainsKey(item.grupo))
                        dict[item.grupo].Add(mi);
                    else
                    {
                        dict.Add(item.grupo, new List<MovItem>());
                        dict[item.grupo].Add(mi);
                    }
                }
                //listaMovItem.Add(mi);
            }
            if (dict.ElementAt(0).Value.Count == 0)
                dict.Remove("SEM GRUPO");

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            double totalGrupo;
            double totalGrupoCOFINS;
            double totalGrupoPIS;

            double total = 0;
            double totalCOFINS = 0;
            double totalPIS = 0;

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>Relatório PIS / COFINS no período de {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            for (int i = 0; i < dict.Count; i++)
            {
                string grupo = dict.ElementAt(i).Key;
                List<MovItem> ls = dict.ElementAt(i).Value;

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Grupo: {0}</td>", grupo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune' style='font-size:10px;'>Cód.</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px;'>Item</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>UN</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>CSTP</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>CSTC</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>PIS</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>COFINS</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>Vlr. Un.</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>Qtd. V.</th>");
                sb.Append("<th scoupe='colune' style='font-size:10px; text-align:center;'>Vlr. Total</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                totalGrupo = 0;
                totalGrupoCOFINS = 0;
                totalGrupoPIS = 0;

                foreach (MovItem mi in ls)
                {
                    query = db.Query();
                    query.Constrain(typeof(Item));
                    query.Descend("id").Constrain(mi.idItem);
                    Item item = query.Execute()[0] as Item;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td style='font-size:10px;'>{0}</td>", item.id);
                    sb.AppendFormat("<td style='font-size:10px; width: 280px;'>{0}</td>", item.nome);
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", item.unidMed);
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", mi.pisCst);
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", mi.cofinsCst);
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}% / {1}</td>", mi.pisAliq, formatMoney(Decimal.Parse(((mi.vlrUnitVendaFinalQtd * mi.pisAliq) / 100).ToString()), false));
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}% / {1}</td>", mi.cofinsAliq, formatMoney(Decimal.Parse(((mi.vlrUnitVendaFinalQtd * mi.cofinsAliq) / 100).ToString()), false));
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaFinal.ToString()), false));
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", mi.qtd);
                    sb.AppendFormat("<td style='font-size:10px; text-align:center;'>{0}</td>", formatMoney(Decimal.Parse(mi.vlrUnitVendaFinalQtd.ToString()), false));
                    sb.Append("</tr>");

                    totalGrupo += mi.vlrUnitVendaFinalQtd;
                    totalGrupoCOFINS += (mi.vlrUnitVendaFinalQtd * mi.cofinsAliq) / 100;
                    totalGrupoPIS += (mi.vlrUnitVendaFinalQtd * mi.pisAliq) / 100;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<td>Sub-Total Vendas: {0}</td>", formatMoney(Decimal.Parse(totalGrupo.ToString()), true));
                sb.AppendFormat("<td>Sub-Total PIS: {0}</td>", formatMoney(Decimal.Parse(totalGrupoPIS.ToString()), true));
                sb.AppendFormat("<td>Sub-Total COFINS: {0}</td>", formatMoney(Decimal.Parse(totalGrupoCOFINS.ToString()), true));
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                total += totalGrupo;
                totalCOFINS += totalGrupoCOFINS;
                totalPIS += totalGrupoPIS;
            }

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Total Vendas: {0}</th>", formatMoney(Decimal.Parse(total.ToString()), true));
            sb.AppendFormat("<th>Total PIS: {0}</th>", formatMoney(Decimal.Parse(totalPIS.ToString()), true));
            sb.AppendFormat("<th>Total COFINS: {0}</th>", formatMoney(Decimal.Parse(totalCOFINS.ToString()), true));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='border-bottom: 2px solid #6678b1; font-size:14px;'>Legenda CSTP(CST-PIS) / CSTC(CST-COFINS)</th>", "");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>01: Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo)</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>02: Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada)</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>03: Operação Tributável - Base de Calculo = Quantidade Vendida x Alíquota por Unidade de Produto</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>04: Operação Tributável - Tributação Monofásica - (Alíquota Zero)</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>05: Operação Tributável (substituição tributária)</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>06: Operação Tributável – Alíquota zero</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>07: Operação Isenta da contribuição</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>08: Operação Sem Incidência da contribuição</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>09: Operação com suspensão da contribuição</th>");
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='font-size:11px;'>99: Outras Operações</th>");
            sb.Append("</tr>");
            sb.Append("</table>");
        }
        private void relatorioAgrodefesa(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim, int idItem, int idIEE)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);
            IQuery query;

            // encontrando o fornecedor do estoque requerido
            Cliente fornecedor = new Cliente();

            query = db.Query();
            query.Constrain(typeof(MovItem));
            query.Descend("idIEE").Constrain(idIEE);

            foreach (MovItem mi in query.Execute())
            {
                query = db.Query();
                query.Constrain(typeof(Mov));
                query.Descend("id").Constrain(mi.idMov);

                foreach (Mov mov in query.Execute())
                {
                    if (mov.tipo == EMovTipo.entrada_compra)
                    {
                        query = db.Query();
                        query.Constrain(typeof(Cliente));
                        query.Descend("id").Constrain(mov.idCliente);
                        fornecedor = query.Execute()[0] as Cliente;
                    }
                }
            }
            //


            //buscando as movimentações no periodo
            List<Mov> listaMov = new List<Mov>();

            query = db.Query();
            query.Constrain(typeof(Mov));
            query.Descend("dthrMovEmissao").OrderAscending();

            foreach (Mov xxx in query.Execute())
                if (xxx.dthrMovEmissao != null)
                    if (StringToDateTime(xxx.dthrMovEmissao) >= StringToDateTime(dataInicio) && StringToDateTime(xxx.dthrMovEmissao) <= StringToDateTime(dataFim))
                        listaMov.Add(xxx);

            //

            //encontrando o saldo no início do período
            double saldo = 0;

            foreach (Mov mov in query.Execute())
                if (mov.dthrMovEmissao != null)
                    if (StringToDateTime(mov.dthrMovEmissao) < StringToDateTime(dataInicio))
                    {
                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem mi in query.Execute())
                        {
                            if (mi.idIEE == idIEE)
                                if (mov.tipo.ToString().StartsWith("entrada"))
                                    saldo += mi.qtd;
                                else
                                    saldo -= mi.qtd;
                        }
                    }
            //

            //busca o item
            Item item = new Item();
            query = db.Query();
            query.Constrain(typeof(Item));
            query.Descend("id").Constrain(idItem);
            item = query.Execute()[0] as Item;
            //

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.Append("<th style='font-size:16px;'>Relatório Agrodefesa</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", item.nome);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='folha_relAgrodefesa'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Data</th>");
            sb.Append("<th scoupe='colune'>Produtor</th>");
            sb.Append("<th scoupe='colune'>Propriedade</th>");
            sb.Append("<th scoupe='colune'>Município</th>");
            sb.Append("<th scoupe='colune'>UF</th>");
            sb.Append("<th scoupe='colune'>N° NF</th>");
            sb.Append("<th scoupe='colune'>Lote</th>");
            sb.Append("<th scoupe='colune'>Lab.</th>");
            sb.Append("<th scoupe='colune'>Venc.</th>");
            sb.Append("<th scoupe='colune'>Ent./Sai.</th>");
            sb.Append("<th scoupe='colune'>Saldo</th>");
            sb.Append("<th scoupe='colune' style='width:3cm;'>Ass.</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            double entrada = 0;
            double saida = 0;

            foreach (Mov mov in listaMov)
            {
                query = db.Query();
                query.Constrain(typeof(MovItem));
                query.Descend("idMov").Constrain(mov.id);

                foreach (MovItem mi in query.Execute())
                {
                    if (mi.idItem == idItem && mi.idIEE == idIEE)
                    {
                        ClienteEndereco cEndereco = query.Execute()[0] as ClienteEndereco;
                        if (mov.tipo == EMovTipo.entrada_compra)
                        {
                            query = db.Query();
                            query.Constrain(typeof(Empresa));
                            query.Descend("id").Constrain(idEmp);
                            Empresa emp = query.Execute()[0] as Empresa;

                            query = db.Query();
                            query.Constrain(typeof(Cliente));
                            query.Descend("id").Constrain(emp.idCliente);
                            Cliente cli = query.Execute()[0] as Cliente;

                            query = db.Query();
                            query.Constrain(typeof(ClienteEndereco));
                            query.Descend("idCliente").Constrain(cli.id);
                            if (query.Execute().Count == 0)
                                cEndereco = new ClienteEndereco();
                            else
                                cEndereco = query.Execute()[0] as ClienteEndereco;
                        }
                        else
                        {
                            query = db.Query();
                            query.Constrain(typeof(ClienteEndereco));
                            query.Descend("idCliente").Constrain(mov.idClienteEndereco);
                            if (query.Execute().Count == 0)
                                cEndereco = new ClienteEndereco();
                            else
                                cEndereco = query.Execute()[0] as ClienteEndereco;
                        }

                        query = db.Query();
                        query.Constrain(typeof(ItemEmpEstoque));
                        query.Descend("id").Constrain(mi.idIEE);
                        int i = query.Execute().Count;
                        ItemEmpEstoque iee = query.Execute()[0] as ItemEmpEstoque;

                        sb.Append("<tr>");
                        sb.AppendFormat("<td>{0}</td>", mov.dthrMovEmissao.Substring(0, 10));
                        sb.AppendFormat("<td>{0}</td>", mov.cliente_nome);
                        sb.AppendFormat("<td>{0}</td>", cEndereco.logradouro);
                        sb.AppendFormat("<td>{0}</td>", cEndereco.cidade);
                        sb.AppendFormat("<td>{0}</td>", cEndereco.uf);
                        sb.AppendFormat("<td>{0}</td>", mov.numeroNF);
                        sb.AppendFormat("<td>{0}</td>", iee.lote);
                        sb.AppendFormat("<td>{0}</td>", fornecedor.nome);
                        sb.AppendFormat("<td>{0}</td>", iee.dtVal);
                        if (mov.tipo == EMovTipo.entrada_compra)
                        {
                            sb.AppendFormat("<td>{0}</td>", mi.qtd);
                            sb.AppendFormat("<td>{0}</td>", saldo += mi.qtd);
                            entrada += mi.qtd;
                        }
                        else
                        {
                            sb.AppendFormat("<td>{0}</td>", -mi.qtd);
                            sb.AppendFormat("<td>{0}</td>", saldo -= mi.qtd);
                            saida += mi.qtd;
                        }
                        sb.Append("</tr>");
                    }
                }
            }
            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Total de Entrada: {0}</th>", entrada);
            sb.AppendFormat("<th>Total de Saída: {0}</th>", saida);
            sb.AppendFormat("<th>Saldo: {0}</th>", saldo);
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioExtratoContaCorrenteCaixa(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim, int idConta, int idCentroCusto, int idTipoLancamento)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);
            IQuery query;

            query = db.Query();
            query.Constrain(typeof(Finan_Lancamento));
            query.Descend("id").OrderAscending();
            List<Finan_Lancamento> lsLancamentoTemp = new List<Finan_Lancamento>();
            foreach (Finan_Lancamento xxx in query.Execute())
                if (xxx.dtLancamento != null)
                    if (StringToDateTime(xxx.dtLancamento) >= StringToDateTime(dataInicio) && StringToDateTime(xxx.dtLancamento) <= StringToDateTime(dataFim))
                        lsLancamentoTemp.Add(xxx);

            IEnumerable<Finan_Lancamento> lsLancamentoTodos = lsLancamentoTemp.OrderBy(xxx => xxx.idContaDestino);

            Dictionary<Finan_Conta, List<Finan_Lancamento>> dictConta = new Dictionary<Finan_Conta, List<Finan_Lancamento>>();
            Dictionary<Finan_CentroCusto, List<Finan_Lancamento>> dictCentroCusto = new Dictionary<Finan_CentroCusto, List<Finan_Lancamento>>();
            Dictionary<Finan_TipoLancamento, List<Finan_Lancamento>> dictTipoLancamento = new Dictionary<Finan_TipoLancamento, List<Finan_Lancamento>>();

            foreach (Finan_Lancamento lancamento in lsLancamentoTodos)
            {
                Finan_Conta conta = new Finan_Conta();
                query = db.Query();
                query.Constrain(typeof(Finan_Conta));
                query.Descend("id").Constrain(lancamento.idContaDestino);
                if (query.Execute().Count > 0)
                    conta = query.Execute()[0] as Finan_Conta;

                if (dictConta.ContainsKey(conta))
                    dictConta[conta].Add(lancamento);
                else
                {
                    dictConta.Add(conta, new List<Finan_Lancamento>());
                    dictConta[conta].Add(lancamento);
                }
            }
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());


            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "RELATÓRIO EXTRATO CONTA CORRENTE CAIXA");
            sb.Append("</tr>");
            sb.Append("</table>");

            for (int i = 0; i < dictConta.Count; i++)
            {
                Finan_Conta grupoConta = dictConta.ElementAt(i).Key;
                List<Finan_Lancamento> lsLancamento = dictConta.ElementAt(i).Value;
                dictCentroCusto = new Dictionary<Finan_CentroCusto, List<Finan_Lancamento>>();

                if (idConta != 0 && idConta != grupoConta.id)
                    continue;

                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='font-size:14px; width:50%;'>Conta: {0}</th>", grupoConta.nome);
                sb.AppendFormat("<th style='font-size:14px; width:50%;'>Tipo: {0}</th>", grupoConta.tipo);
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("</table>");

                foreach (Finan_Lancamento lancamento2 in lsLancamento)
                {
                    Finan_CentroCusto centroCusto = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_CentroCusto));
                    query.Descend("id").Constrain(lancamento2.idCentroCusto);
                    if (query.Execute().Count == 0)
                        centroCusto = new Finan_CentroCusto();
                    else
                        centroCusto = query.Execute()[0] as Finan_CentroCusto;

                    if (dictCentroCusto.ContainsKey(centroCusto))
                        dictCentroCusto[centroCusto].Add(lancamento2);
                    else
                    {
                        dictCentroCusto.Add(centroCusto, new List<Finan_Lancamento>());
                        dictCentroCusto[centroCusto].Add(lancamento2);
                    }
                }

                for (int j = 0; j < dictCentroCusto.Count; j++)
                {
                    Finan_CentroCusto grupoCentroCusto = dictCentroCusto.ElementAt(j).Key;
                    List<Finan_Lancamento> lsLancamento2 = dictCentroCusto.ElementAt(j).Value;
                    dictTipoLancamento = new Dictionary<Finan_TipoLancamento, List<Finan_Lancamento>>();

                    if (idCentroCusto != 0 && idCentroCusto != grupoCentroCusto.id)
                        continue;

                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='border-bottom: 2px solid; font-size:14px;'>Centro de Custo: {0}-{1}</th>", grupoCentroCusto.id, grupoCentroCusto.nome);
                    sb.Append("</tr>");
                    sb.Append("</thead>");
                    sb.Append("</table>");

                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead>");
                    sb.Append("<th scoupe='colune' style='width:5%;'>Conta</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Documento</th>");
                    sb.Append("<th scoupe='colune' style='width:12%;'>Data Lançamento</th>");
                    sb.Append("<th scoupe='colune' style='width:13%;'>Tipo</th>");
                    sb.Append("<th scoupe='colune' style='width:15%;'>Histórico</th>");
                    sb.Append("<th scoupe='colune' style='width:15%;'>Debito</th>");
                    sb.Append("<th scoupe='colune' style='width:15%;'>Credito</th>");
                    sb.Append("<th scoupe='colune' style='width:15%;'>Saldo</th>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");

                    foreach (Finan_Lancamento lancamento3 in lsLancamento2)
                    {
                        Finan_TipoLancamento tipoLancamento = null;
                        query = db.Query();
                        query.Constrain(typeof(Finan_TipoLancamento));
                        query.Descend("id").Constrain(lancamento3.idTipoLancamento);
                        if (query.Execute().Count == 0)
                            tipoLancamento = new Finan_TipoLancamento();
                        else
                            tipoLancamento = query.Execute()[0] as Finan_TipoLancamento;

                        if (dictTipoLancamento.ContainsKey(tipoLancamento))
                            dictTipoLancamento[tipoLancamento].Add(lancamento3);
                        else
                        {
                            dictTipoLancamento.Add(tipoLancamento, new List<Finan_Lancamento>());
                            dictTipoLancamento[tipoLancamento].Add(lancamento3);
                        }
                    }

                    for (int k = 0; k < dictTipoLancamento.Count; k++)
                    {
                        Finan_TipoLancamento tipoLancamento2 = dictTipoLancamento.ElementAt(k).Key;
                        List<Finan_Lancamento> lsLancamento3 = dictTipoLancamento.ElementAt(k).Value;

                        foreach (Finan_Lancamento lan in lsLancamento3)
                        {
                            if (idTipoLancamento == 0 || idTipoLancamento == lan.idTipoLancamento)
                            {
                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", tipoLancamento2.codigo);
                                sb.AppendFormat("<td>{0}</td>", lan.nome);
                                sb.AppendFormat("<td>{0}</td>", lan.dtLancamento);
                                sb.AppendFormat("<td>{0}</td>", tipoLancamento2.nomeTipoLancamento);
                                sb.AppendFormat("<td>{0}</td>", lan.historico);
                                if (lan.isCredito)
                                {
                                    sb.AppendFormat("<td>{0}</td>", "-");
                                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(lan.valorLancado.ToString()), true));
                                }
                                else
                                {
                                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(lan.valorLancado.ToString()), true));
                                    sb.AppendFormat("<td>{0}</td>", "-");
                                }
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(lan.saldoAtual.ToString()), true));
                                sb.Append("</tr>");
                            }
                        }
                    }
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }
        }
        private void relatorioTitulosAReceberPagar(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim, bool mostraAReceber, bool mostraAPagar)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);
            IQuery query;

            //guarda todas as contas a receber e a pagar em listas tipadas distintas
            Finan_Titulo ft = null;
            List<Finan_TituloItem> listaTitulosReceber = new List<Finan_TituloItem>();
            List<Finan_TituloItem> listaTitulosPagar = new List<Finan_TituloItem>();
            foreach (Finan_TituloItem fti in db.Query<Finan_TituloItem>())
            {
                query = db.Query();
                query.Constrain(typeof(Finan_Titulo));
                query.Descend("id").Constrain(fti.idTitulo);
                ft = query.Execute()[0] as Finan_Titulo;

                if (StringToDateTime(fti.dtPagamento) >= StringToDateTime(dataInicio) && StringToDateTime(fti.dtPagamento) <= StringToDateTime(dataFim)
                    && ft.tipo == ETipoTitulo.titulo_a_receber && fti.situacao == ETituloSituacao.em_aberto)
                    listaTitulosReceber.Add(fti);
                else
                    if (StringToDateTime(fti.dtPagamento) >= StringToDateTime(dataInicio) && StringToDateTime(fti.dtPagamento) <= StringToDateTime(dataFim)
                        && ft.tipo == ETipoTitulo.titulo_a_pagar && fti.situacao == ETituloSituacao.em_aberto)
                        listaTitulosPagar.Add(fti);
            }

            //agrupa as contas a receber por cliente
            Dictionary<Cliente, List<Finan_TituloItem>> dictContasReceberCliente = new Dictionary<Cliente, List<Finan_TituloItem>>();
            foreach (Finan_TituloItem fti in listaTitulosReceber.OrderByDescending(item => StringToDateTime(item.dtLancamento)))
            {
                query = db.Query();
                query.Constrain(typeof(Finan_Titulo));
                query.Descend("id").Constrain(fti.idTitulo);
                IObjectSet rs_finanTitulo = query.Execute();
                ft = rs_finanTitulo[0] as Finan_Titulo;

                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(ft.idClienteAPagar);
                IObjectSet rs_cliente = query.Execute();

                if (rs_cliente.Count == 0)
                    Console.Beep();

                Cliente cliente = rs_cliente[0] as Cliente;

                if (cliente.id == 1)
                    continue;

                if (dictContasReceberCliente.ContainsKey(cliente))
                    dictContasReceberCliente[cliente].Add(fti);
                else
                {
                    dictContasReceberCliente.Add(cliente, new List<Finan_TituloItem>());
                    dictContasReceberCliente[cliente].Add(fti);
                }
            }

            //agrupa as contas a pagar por cliente
            Dictionary<Cliente, List<Finan_TituloItem>> dictContasPagarCliente = new Dictionary<Cliente, List<Finan_TituloItem>>();
            foreach (Finan_TituloItem fti in listaTitulosPagar.OrderByDescending(item => StringToDateTime(item.dtLancamento)))
            {
                query = db.Query();
                query.Constrain(typeof(Finan_Titulo));
                query.Descend("id").Constrain(fti.idTitulo);
                IObjectSet rs_finanTitulo = query.Execute();
                ft = rs_finanTitulo[0] as Finan_Titulo;

                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(ft.idClienteAReceber);
                IObjectSet rs_cliente = query.Execute();
                Cliente cliente = rs_cliente[0] as Cliente;

                if (cliente.id == 1)
                    continue;

                if (dictContasPagarCliente.ContainsKey(cliente))
                    dictContasPagarCliente[cliente].Add(fti);
                else
                {
                    dictContasPagarCliente.Add(cliente, new List<Finan_TituloItem>());
                    dictContasPagarCliente[cliente].Add(fti);
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            if (mostraAReceber)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 16px;'>Títulos a Receber no período de {0} a {1}</th>", dataInicio, dataFim);
                sb.Append("</tr>");
                sb.Append("</table>");

                if (dictContasReceberCliente.Count > 0)
                {
                    foreach (Cliente cliente in dictContasReceberCliente.Keys.OrderBy(item => item.nome))
                    {
                        sb.Append("<table class='tabela_head'>");
                        sb.Append("<thead/>");
                        sb.Append("<tr>");
                        sb.AppendFormat("<th style='fontsize:16px; width:40%;'>Cliente: {0}</th>", cliente.nome);
                        sb.Append("</tr>");
                        sb.Append("</table>");

                        sb.Append("<table class='tabela_iee'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Nº do Documento</th>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Vencimento</th>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Valor a Receber</th>");
                        sb.Append("<th scoupe='colune' style='width:60%;'>Observações</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");

                        IEnumerable<Finan_TituloItem> ftiValor = dictContasReceberCliente[cliente].OrderBy(item => StringToDateTime(item.dtPagamento));
                        foreach (Finan_TituloItem fti in ftiValor)
                        {
                            sb.Append("<tr>");
                            sb.AppendFormat("<td>{0}</td>", fti.identificador);
                            sb.AppendFormat("<td>{0}</td>", fti.dtPagamento);
                            sb.AppendFormat("<td>{0}</td>", formatMoney(Convert.ToDecimal(fti.valorCobrado), true));
                            sb.AppendFormat("<td>{0}</td>", fti.obs);
                            sb.Append("</tr>");
                        }
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }
                else
                {
                    sb.Append("<table class='tabela_ass'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.Append("<th style='fontsize: 16px;'>NÃO EXISTEM CONTAS A RECEBER NO PERÍODO</th>");
                    sb.Append("</tr>");
                    sb.Append("</table>");
                }
            }

            if (mostraAPagar)
            {
                sb.Append("<table class='tabela_ass'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 16px;'>Títulos a Pagar no período de {0} a {1}</th>", dataInicio, dataFim);
                sb.Append("</tr>");
                sb.Append("</table>");

                if (dictContasPagarCliente.Count > 0)
                {
                    foreach (Cliente cliente in dictContasPagarCliente.Keys.OrderBy(item => item.nome))
                    {
                        sb.Append("<table class='tabela_head'>");
                        sb.Append("<thead/>");
                        sb.Append("<tr>");
                        sb.AppendFormat("<th style='fontsize:16px; width:40%;'>Cliente: {0}</th>", cliente.nome);
                        sb.Append("</tr>");
                        sb.Append("</table>");

                        sb.Append("<table class='tabela_iee'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Nº do Documento</th>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Vencimento</th>");
                        sb.Append("<th scoupe='colune' style='width:20%;'>Valor a Pagar</th>");
                        sb.Append("<th scoupe='colune' style='width:60%;'>Observações</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                        
                        IEnumerable<Finan_TituloItem> ftiValor = dictContasPagarCliente[cliente].OrderBy(item => StringToDateTime(item.dtPagamento));
                        foreach (Finan_TituloItem fti in ftiValor)
                        {
                            sb.Append("<tr>");
                            sb.AppendFormat("<td>{0}</td>", fti.identificador);
                            sb.AppendFormat("<td>{0}</td>", fti.dtPagamento);
                            sb.AppendFormat("<td>{0}</td>", formatMoney(Convert.ToDecimal(fti.valorCobrado), true));
                            sb.AppendFormat("<td>{0}</td>", fti.obs);
                            sb.Append("</tr>");
                        }
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }
                else
                {
                    sb.Append("<table class='tabela_ass'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.Append("<th style='fontsize: 16px;'>NÃO EXISTEM CONTAS A PAGAR NO PERÍODO</th>");
                    sb.Append("</tr>");
                    sb.Append("</table>");
                }
            }
        }
        private void relatorioItensBalanco(StringBuilder sb, int idCorp, int idEmp, int idBalanco)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Balanco balanco = null;
            query = db.Query();
            query.Constrain(typeof(Balanco));
            query.Descend("id").Constrain(idBalanco);
            balanco = query.Execute()[0] as Balanco;

            Dictionary<int, List<BalancoItem>> dictBalancoItem = new Dictionary<int, List<BalancoItem>>();

            foreach (BalancoItem bi in db.Query<BalancoItem>().OrderBy(item => item.item_nome))
            {
                if (bi.idBalanco == balanco.id)
                {
                    if (dictBalancoItem.ContainsKey(bi.idItem))
                    {
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                    else
                    {
                        dictBalancoItem.Add(bi.idItem, new List<BalancoItem>());
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "BALANÇO");
            sb.AppendFormat("<th style='fontsize: 16px;'>Data do Fechamento do Balanço: {0}</th>", balanco.dthrFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Cód.</th>");
            sb.Append("<th scoupe='colune'>Item</th>");
            sb.Append("<th scoupe='colune'>Rf. Única</th>");
            sb.Append("<th scoupe='colune'>Fr. Aux.</th>");
            sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
            sb.Append("<th scoupe='colune'>Quantidade</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            for (int i = 0; i < dictBalancoItem.Count; i++)
            {
                List<BalancoItem> itensBalanco = dictBalancoItem.ElementAt(i).Value;
                BalancoItem balancoItem = itensBalanco.ElementAt(0);

                Item item = null;
                query = db.Query();
                query.Constrain(typeof(Item));
                query.Descend("id").Constrain(balancoItem.idItem);
                item = query.Execute()[0] as Item;

                double qtd = 0;
                foreach (BalancoItem bi in itensBalanco)
                {
                    qtd += bi.qtdLancada;
                }
                balancoItem.qtdLancada = qtd;

                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", item.id);
                sb.AppendFormat("<td>{0}</td>", item.nome);
                sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                sb.AppendFormat("<td>{0}</td>", balancoItem.estoque_identificador);
                sb.AppendFormat("<td>{0}</td>", balancoItem.qtdLancada);
                sb.Append("</tr>");
            }

            sb.Append("</tbody>");
            sb.Append("</table>");
        }
        private void relatorioVerificacaoBalanco(StringBuilder sb, int idCorp, int idEmp, int idBalanco, bool somenteDivergencias)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Balanco balanco = null;
            query = db.Query();
            query.Constrain(typeof(Balanco));
            query.Descend("id").Constrain(idBalanco);
            balanco = query.Execute()[0] as Balanco;

            Dictionary<int, List<BalancoItem>> dictBalancoItem = new Dictionary<int, List<BalancoItem>>();

            foreach (BalancoItem bi in db.Query<BalancoItem>().OrderBy(item => item.item_nome))
            {
                if (bi.idBalanco == balanco.id)
                {
                    if (dictBalancoItem.ContainsKey(bi.idItem))
                    {
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                    else
                    {
                        dictBalancoItem.Add(bi.idItem, new List<BalancoItem>());
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "VERIFICAÇÃO DE BALANÇO");
            sb.AppendFormat("<th style='fontsize: 16px;'>Data do Fechamento do Balanço: {0}</th>", balanco.dthrFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            double qtdAnteriorTotal = 0;
            double qtdLancadaTotal = 0;

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Cód.</th>");
            sb.Append("<th scoupe='colune'>Item</th>");
            sb.Append("<th scoupe='colune'>Rf. Única</th>");
            sb.Append("<th scoupe='colune'>Fr. Aux.</th>");
            sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
            sb.Append("<th scoupe='colune'>Quantidade Anterior</th>");
            sb.Append("<th scoupe='colune'>Quantidade Lancada</th>");
            sb.Append("<th scoupe='colune'>Saldo</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            for (int i = 0; i < dictBalancoItem.Count; i++)
            {
                List<BalancoItem> itensBalanco = dictBalancoItem.ElementAt(i).Value;
                BalancoItem balancoItem = itensBalanco.ElementAt(0);

                Item item = null;
                query = db.Query();
                query.Constrain(typeof(Item));
                query.Descend("id").Constrain(balancoItem.idItem);
                item = query.Execute()[0] as Item;

                double qtdAnterior = itensBalanco[0].qtdAnterior;
                double qtdLancada = 0;

                foreach (BalancoItem bi in itensBalanco)
                        qtdLancada += bi.qtdLancada;

                balancoItem.qtdAnterior = qtdAnterior;
                balancoItem.qtdLancada = qtdLancada;

                if (somenteDivergencias)
                    if (balancoItem.qtdAnterior == balancoItem.qtdLancada)
                        continue;

                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", item.id);
                sb.AppendFormat("<td>{0}</td>", item.nome);
                sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                sb.AppendFormat("<td>{0}</td>", balancoItem.estoque_identificador);
                sb.AppendFormat("<td>{0}</td>", qtdAnterior);
                sb.AppendFormat("<td>{0}</td>", qtdLancada);
                sb.AppendFormat("<td>{0}</td>", qtdLancada - qtdAnterior);
                sb.Append("</tr>");

                qtdAnteriorTotal += qtdAnterior;
                qtdLancadaTotal += qtdLancada;
            }

            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Quantidade Anterior Total: {0}</tr>", qtdAnteriorTotal);
            sb.AppendFormat("<th>Quantidade Lançada Total: {0}</th>", qtdLancadaTotal);
            sb.AppendFormat("<th>Saldo Total: {0}</th>", (qtdLancadaTotal - qtdAnteriorTotal));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioEstoqueNaData(StringBuilder sb, int idCorp, int idEmp, int idBalanco)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Balanco balanco = null;
            query = db.Query();
            query.Constrain(typeof(Balanco));
            query.Descend("id").Constrain(idBalanco);
            balanco = query.Execute()[0] as Balanco;

            Dictionary<int, List<BalancoItem>> dictBalancoItem = new Dictionary<int, List<BalancoItem>>();

            foreach (BalancoItem bi in db.Query<BalancoItem>().OrderBy(item => item.item_nome))
            {
                if (bi.idBalanco == balanco.id)
                {
                    if (dictBalancoItem.ContainsKey(bi.idItem))
                    {
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                    else
                    {
                        dictBalancoItem.Add(bi.idItem, new List<BalancoItem>());
                        dictBalancoItem[bi.idItem].Add(bi);
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "ESTOQUE NA DATA DO BALANÇO");
            sb.AppendFormat("<th style='fontsize: 16px;'>Data de Abertura do Balanço: {0}</th>", balanco.dthrInicio);
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Cód.</th>");
            sb.Append("<th scoupe='colune'>Item</th>");
            sb.Append("<th scoupe='colune'>Rf. Única</th>");
            sb.Append("<th scoupe='colune'>Fr. Aux.</th>");
            sb.Append("<th scoupe='colune'>Grade/Ident.</th>");
            sb.Append("<th scoupe='colune'>Quantidade</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            for (int i = 0; i < dictBalancoItem.Count; i++)
            {
                List<BalancoItem> itensBalanco = dictBalancoItem.ElementAt(i).Value;
                BalancoItem balancoItem = itensBalanco.ElementAt(0);

                Item item = null;
                query = db.Query();
                query.Constrain(typeof(Item));
                query.Descend("id").Constrain(balancoItem.idItem);
                item = query.Execute()[0] as Item;

                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", item.id);
                sb.AppendFormat("<td>{0}</td>", item.nome);
                sb.AppendFormat("<td>{0}</td>", item.rfUnica);
                sb.AppendFormat("<td>{0}</td>", item.rfAuxiliar);
                sb.AppendFormat("<td>{0}</td>", balancoItem.estoque_identificador);
                sb.AppendFormat("<td>{0}</td>", balancoItem.qtdAnterior);
                sb.Append("</tr>");
            }

            sb.Append("</tbody>");
            sb.Append("</table>");
        }
        private void relatorioChequesAReceber(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Finan_TipoDocumento finanTipoDocumento = null;
            query = db.Query();
            query.Constrain(typeof(Finan_TipoDocumento));
            query.Descend("nome").Constrain("CHEQUE");
            finanTipoDocumento = query.Execute()[0] as Finan_TipoDocumento;

            List<Finan_Titulo> listaChequesAReceber = new List<Finan_Titulo>();

            foreach (Finan_Titulo finanTitulo in db.Query<Finan_Titulo>())
                if (finanTitulo.idTipoDocumento == finanTipoDocumento.id && finanTitulo.tipo == ETipoTitulo.cheque_a_receber)
                    if (StringToDateTime(finanTitulo.dtPagamento) >= StringToDateTime(dataInicio) && StringToDateTime(finanTitulo.dtPagamento) <= StringToDateTime(dataFim))
                        if (!finanTitulo.isAlterado && !finanTitulo.isBaixado && !finanTitulo.isCompensado)
                            listaChequesAReceber.Add(finanTitulo);

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "CHEQUES A RECEBER");
            sb.AppendFormat("<th style='fontsize: 16px;'>Período: De {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Cód.</th>");
            sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
            sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
            sb.Append("<th scoupe='colune'>Bom Para o Dia</th>");
            sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
            sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            double totalAReceber = 0;

            foreach (Finan_Titulo finanTitulo in listaChequesAReceber.OrderBy(item => StringToDateTime(item.dtPagamento)))
            {
                Cliente clienteAPagar = null;
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                clienteAPagar = query.Execute()[0] as Cliente;

                Cliente clienteFornecedorCheque = null;
                if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                    clienteFornecedorCheque = clienteAPagar;
                else
                {
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                    clienteFornecedorCheque = query.Execute()[0] as Cliente;
                }

                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                sb.AppendFormat("<td>{0}</td>", finanTitulo.dtPagamento);
                sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                sb.Append("</tr>");

                totalAReceber += finanTitulo.valorCobrado;
            }

            sb.Append("</tbody>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Total a Receber: {0}</th>", formatMoney(Decimal.Parse(totalAReceber.ToString()), true));
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("</table>");
        }
        private void relatorioChequesBaixados(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Finan_TipoDocumento finanTipoDocumento = null;
            query = db.Query();
            query.Constrain(typeof(Finan_TipoDocumento));
            query.Descend("nome").Constrain("CHEQUE");
            finanTipoDocumento = query.Execute()[0] as Finan_TipoDocumento;

            List<Finan_Titulo> listaChequesBaixadosCaixa = new List<Finan_Titulo>();
            List<Finan_Titulo> listaChequesBaixadosBanco = new List<Finan_Titulo>();

            foreach (Finan_Titulo finanTitulo in db.Query<Finan_Titulo>())
            {
                if (finanTitulo.idTipoDocumento == finanTipoDocumento.id && finanTitulo.tipo == ETipoTitulo.cheque_a_receber && finanTitulo.dtBaixa != "")
                {
                    if (StringToDateTime(finanTitulo.dtBaixa) >= StringToDateTime(dataInicio) && StringToDateTime(finanTitulo.dtBaixa) <= StringToDateTime(dataFim))
                    {
                        if (!finanTitulo.isAlterado && finanTitulo.isBaixado)
                        {
                            Finan_Conta finanConta = null;
                            query = db.Query();
                            query.Constrain(typeof(Finan_Conta));
                            query.Descend("id").Constrain(finanTitulo.idContaDestino);
                            finanConta = query.Execute()[0] as Finan_Conta;

                            if (finanConta.tipo == EContaTipo.Banco)
                                listaChequesBaixadosBanco.Add(finanTitulo);
                            else if (finanConta.tipo == EContaTipo.Caixa)
                                listaChequesBaixadosCaixa.Add(finanTitulo);
                        }
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "CHEQUES BAIXADOS");
            sb.AppendFormat("<th style='fontsize: 16px;'>Período: De {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");


            if (listaChequesBaixadosCaixa.Count > 0)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.Append("<th style='fontsize: 16px;'>DESTINO: CONTA CAIXA</th>");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
                sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
                sb.Append("<th scoupe='colune'>Data</th>");
                sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
                sb.Append("<th scoupe='colune'>Conta Destino</th>");
                sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Finan_Titulo finanTitulo in listaChequesBaixadosCaixa.OrderBy(item => StringToDateTime(item.dtBaixa)))
                {
                    Cliente clienteAPagar = null;
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                    clienteAPagar = query.Execute()[0] as Cliente;

                    Cliente clienteFornecedorCheque = null;
                    if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                        clienteFornecedorCheque = clienteAPagar;
                    else
                    {
                        query = db.Query();
                        query.Constrain(typeof(Cliente));
                        query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                        clienteFornecedorCheque = query.Execute()[0] as Cliente;
                    }

                    Finan_Conta finanContaDestino = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_Conta));
                    query.Descend("id").Constrain(finanTitulo.idContaDestino);
                    finanContaDestino = query.Execute()[0] as Finan_Conta;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                    sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                    sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.dtPagamento);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                    sb.AppendFormat("<td>{0}</td>", finanContaDestino.nome);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            if (listaChequesBaixadosBanco.Count > 0)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.Append("<th style='fontsize: 16px;'>DESTINO: CONTA BANCO</th>");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
                sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
                sb.Append("<th scoupe='colune'>Data</th>");
                sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
                sb.Append("<th scoupe='colune'>Conta Destino</th>");
                sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Finan_Titulo finanTitulo in listaChequesBaixadosBanco.OrderBy(item => StringToDateTime(item.dtBaixa)))
                {
                    Cliente clienteAPagar = null;
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                    clienteAPagar = query.Execute()[0] as Cliente;

                    Cliente clienteFornecedorCheque = null;
                    if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                        clienteFornecedorCheque = clienteAPagar;
                    else
                    {
                        query = db.Query();
                        query.Constrain(typeof(Cliente));
                        query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                        clienteFornecedorCheque = query.Execute()[0] as Cliente;
                    }

                    Finan_Conta finanContaDestino = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_Conta));
                    query.Descend("id").Constrain(finanTitulo.idContaDestino);
                    finanContaDestino = query.Execute()[0] as Finan_Conta;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                    sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                    sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.dtPagamento);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                    sb.AppendFormat("<td>{0}</td>", finanContaDestino.nome + " Ag:" + finanContaDestino.ag + " CC:" + finanContaDestino.conta);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }
        }
        private void relatorioChequesCompensados(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Finan_TipoDocumento finanTipoDocumento = null;
            query = db.Query();
            query.Constrain(typeof(Finan_TipoDocumento));
            query.Descend("nome").Constrain("CHEQUE");
            finanTipoDocumento = query.Execute()[0] as Finan_TipoDocumento;

            List<Finan_Titulo> listaChequesCompensados = new List<Finan_Titulo>();

            foreach (Finan_Titulo finanTitulo in db.Query<Finan_Titulo>())
            {
                if (finanTitulo.idTipoDocumento == finanTipoDocumento.id && finanTitulo.tipo == ETipoTitulo.cheque_a_receber && finanTitulo.dtCompensacao != "")
                {
                    if (StringToDateTime(finanTitulo.dtCompensacao) >= StringToDateTime(dataInicio) && StringToDateTime(finanTitulo.dtCompensacao) <= StringToDateTime(dataFim))
                    {
                        if (!finanTitulo.isAlterado && finanTitulo.isBaixado && finanTitulo.isCompensado)
                            listaChequesCompensados.Add(finanTitulo);
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "CHEQUES COMPENSADOS");
            sb.AppendFormat("<th style='fontsize: 16px;'>Período: De {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_mov'>");
            sb.Append("<thead>");
            sb.Append("<th scoupe='colune'>Cód.</th>");
            sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
            sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
            sb.Append("<th scoupe='colune'>Data</th>");
            sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
            sb.Append("<th scoupe='colune'>Conta Destino</th>");
            sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            foreach (Finan_Titulo finanTitulo in listaChequesCompensados.OrderBy(item => StringToDateTime(item.dtCompensacao)))
            {
                Cliente clienteAPagar = null;
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                clienteAPagar = query.Execute()[0] as Cliente;

                Cliente clienteFornecedorCheque = null;
                if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                    clienteFornecedorCheque = clienteAPagar;
                else
                {
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                    clienteFornecedorCheque = query.Execute()[0] as Cliente;
                }

                Finan_Conta finanContaDestino = null;
                query = db.Query();
                query.Constrain(typeof(Finan_Conta));
                query.Descend("id").Constrain(finanTitulo.idContaDestino);
                finanContaDestino = query.Execute()[0] as Finan_Conta;

                sb.Append("<tr>");
                sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                sb.AppendFormat("<td>{0}</td>", finanTitulo.dtPagamento);
                sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                sb.AppendFormat("<td>{0}</td>", finanContaDestino.nome + " Ag:" + finanContaDestino.ag + " CC:" + finanContaDestino.conta);
                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                sb.Append("</tr>");
            }

            sb.Append("</tbody>");
            sb.Append("</table>");
        }
        private void relatorioChequesDevolvidos(StringBuilder sb, int idCorp, int idEmp, string dataInicio, string dataFim)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;

            Finan_TipoDocumento finanTipoDocumento = null;
            query = db.Query();
            query.Constrain(typeof(Finan_TipoDocumento));
            query.Descend("nome").Constrain("CHEQUE");
            finanTipoDocumento = query.Execute()[0] as Finan_TipoDocumento;

            List<Finan_Titulo> listaChequesDevolvidos1 = new List<Finan_Titulo>();
            List<Finan_Titulo> listaChequesDevolvidos2 = new List<Finan_Titulo>();

            foreach (Finan_Titulo finanTitulo in db.Query<Finan_Titulo>())
            {
                if (finanTitulo.idTipoDocumento== finanTipoDocumento.id &&  finanTitulo.tipo == ETipoTitulo.cheque_a_receber && (finanTitulo.dtDevolucao1 != "" || finanTitulo.dtDevolucao2 != ""))
                {
                    if ((StringToDateTime(finanTitulo.dtDevolucao1) >= StringToDateTime(dataInicio) && StringToDateTime(finanTitulo.dtDevolucao1) <= StringToDateTime(dataFim))
                        || (StringToDateTime(finanTitulo.dtDevolucao2) >= StringToDateTime(dataInicio) && StringToDateTime(finanTitulo.dtDevolucao2) <= StringToDateTime(dataFim)))
                    {
                        if (!finanTitulo.isAlterado && finanTitulo.isBaixado && finanTitulo.isDevolvido1 && !finanTitulo.isDevolvido2)
                            listaChequesDevolvidos1.Add(finanTitulo);
                        else if (!finanTitulo.isAlterado && finanTitulo.isBaixado && finanTitulo.isDevolvido1 && finanTitulo.isDevolvido2)
                            listaChequesDevolvidos2.Add(finanTitulo);
                    }
                }
            }

            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "CHEQUES DEVOLVIDOS");
            sb.AppendFormat("<th style='fontsize: 16px;'>Período: De {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            if (listaChequesDevolvidos1.Count > 0)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "1ª DEVOLUÇÃO");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
                sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
                sb.Append("<th scoupe='colune'>Data</th>");
                sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
                sb.Append("<th scoupe='colune'>Conta Destino</th>");
                sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Finan_Titulo finanTitulo in listaChequesDevolvidos1.OrderBy(item => StringToDateTime(item.dtDevolucao1)))
                {
                    Cliente clienteAPagar = null;
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                    clienteAPagar = query.Execute()[0] as Cliente;

                    Cliente clienteFornecedorCheque = null;
                    if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                        clienteFornecedorCheque = clienteAPagar;
                    else
                    {
                        query = db.Query();
                        query.Constrain(typeof(Cliente));
                        query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                        clienteFornecedorCheque = query.Execute()[0] as Cliente;
                    }

                    Finan_Conta finanContaDestino = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_Conta));
                    query.Descend("id").Constrain(finanTitulo.idContaDestino);
                    finanContaDestino = query.Execute()[0] as Finan_Conta;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                    sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                    sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.dtDevolucao1);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                    sb.AppendFormat("<td>{0}</td>", finanContaDestino.nome + " Ag:" + finanContaDestino.ag + " CC:" + finanContaDestino.conta);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }

            if (listaChequesDevolvidos2.Count > 0)
            {
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "2ª DEVOLUÇÃO");
                sb.Append("</tr>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Emitente do Cheque</th>");
                sb.Append("<th scoupe='colune'>Fornecedor do Cheque</th>");
                sb.Append("<th scoupe='colune'>Data</th>");
                sb.Append("<th scoupe='colune'>Nº do Cheque</th>");
                sb.Append("<th scoupe='colune'>Conta Destino</th>");
                sb.Append("<th scoupe='colune'>Valor do Cheque</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Finan_Titulo finanTitulo in listaChequesDevolvidos2.OrderBy(item => StringToDateTime(item.dtDevolucao2)))
                {
                    Cliente clienteAPagar = null;
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(finanTitulo.idClienteAPagar);
                    clienteAPagar = query.Execute()[0] as Cliente;

                    Cliente clienteFornecedorCheque = null;
                    if (finanTitulo.idFornecedorCheque == clienteAPagar.id)
                        clienteFornecedorCheque = clienteAPagar;
                    else
                    {
                        query = db.Query();
                        query.Constrain(typeof(Cliente));
                        query.Descend("id").Constrain(finanTitulo.idFornecedorCheque);
                        clienteFornecedorCheque = query.Execute()[0] as Cliente;
                    }

                    Finan_Conta finanContaDestino = null;
                    query = db.Query();
                    query.Constrain(typeof(Finan_Conta));
                    query.Descend("id").Constrain(finanTitulo.idContaDestino);
                    finanContaDestino = query.Execute()[0] as Finan_Conta;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.id);
                    sb.AppendFormat("<td>{0}</td>", clienteAPagar.nome);
                    sb.AppendFormat("<td>{0}</td>", (clienteFornecedorCheque == clienteAPagar) ? "O MESMO" : clienteFornecedorCheque.nome);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.dtDevolucao2);
                    sb.AppendFormat("<td>{0}</td>", finanTitulo.numCheque);
                    sb.AppendFormat("<td>{0}</td>", finanContaDestino.nome + " Ag:" + finanContaDestino.ag + " CC:" + finanContaDestino.conta);
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTitulo.valorCobrado.ToString()), true));
                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");
                sb.Append("</table>");
            }
        }
        private void relatorioComissionamentoDinamico(StringBuilder sb, int idCorp, int idEmp, int idFuncionario, string dataInicio, string dataFim, bool mostraMov)
        {
            IObjectContainer db = AppFacade.get.conexaoBanco.get(idCorp);

            IQuery query;
            List<Mov> listaMovPeriodo = new List<Mov>();
            Dictionary<int, List<Mov>> dicionarioMovPorFuncionario = new Dictionary<int, List<Mov>>();

            //busca as movimentações no período informado
            query = db.Query();
            query.Constrain(typeof(Mov));
            query.Descend("dthrMovEmissao").OrderAscending();
            foreach (Mov mov in query.Execute())
            {
                if (mov.dthrMovEmissao != null &&
                    mov.idClienteFuncionarioVendedor != 1 && 
                    (mov.tipo == EMovTipo.saida_venda || mov.tipo == EMovTipo.outros_pedido) && (
                    StringToDateTime(mov.dthrMovEmissao) >= StringToDateTime(dataInicio) &&
                    StringToDateTime(mov.dthrMovEmissao) <= StringToDateTime(dataFim))
                    )
                {
                    listaMovPeriodo.Add(mov);
                }
            }

            if (idFuncionario == 1)
            {
                throw new Exception("Não é calculado comissão para Cliente Consumidor");
            }
            //filtra as movimentações para que fiquem somente as do funcionário informado
            else if (idFuncionario > 1)
            {
                dicionarioMovPorFuncionario.Add(idFuncionario, new List<Mov>());
                foreach (Mov mov in listaMovPeriodo)
                {
                    if (mov.idClienteFuncionarioVendedor == idFuncionario)
                    {
                        dicionarioMovPorFuncionario[idFuncionario].Add(mov);
                    }
                }
            }
            //distribui as movimentações em grupos por funcionário
            else
            {
                foreach (Mov mov in listaMovPeriodo)
                {
                    if (!dicionarioMovPorFuncionario.ContainsKey(mov.idClienteFuncionarioVendedor) && mov.idClienteFuncionarioVendedor > 1)
                        dicionarioMovPorFuncionario.Add(mov.idClienteFuncionarioVendedor, new List<Mov>());
                    if (mov.idClienteFuncionarioVendedor > 1)
                        dicionarioMovPorFuncionario[mov.idClienteFuncionarioVendedor].Add(mov);
                }
            }

            //cabeçalho
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());

            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            escreveContatos(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>Relatório Títulos a Receber no período de {0} a {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            //fim cabeçalho

            for (int i = 0; i < dicionarioMovPorFuncionario.Count; i++)
            {
                int idFuncionarioL = dicionarioMovPorFuncionario.ElementAt(i).Key;
                List<Mov> listaMovFuncionarioL = dicionarioMovPorFuncionario.ElementAt(i).Value;

                Cliente funcionario = null;
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(idFuncionarioL);
                if (query.Execute().Count == 0)
                    throw new Exception("Funcionário não encontrado: ID: " + idFuncionarioL);
                else
                    funcionario = query.Execute()[0] as Cliente;

                //nome do funcionario aqui
                sb.Append("<table class='tabela_head'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<td style='font-size:14px; font-weight:bold;'>FUNCIONÁRIO(A): {0}</td>", funcionario.nome);
                sb.Append("</tr>");
                sb.Append("</table>");

                double comissaoProdutosVendidosFuncionarioTotal = 0;
                double comissaoProdutosEmGarantiaFuncionarioTotal = 0;
                double comissaoMaoDeObraFuncionarioTotal = 0;
                double comissaoMaoDeObraGeralFuncionarioTotal = 0;
                double comissaoMaoDeObraGarantiaFuncionarioTotal = 0;
                double comissaoMaoDeObraGeralGarantiaFuncionarioTotal = 0;
                double comissaoMontanteTotalFuncionarioTotal = 0;
                double comissaoSobreProdutosFuncionarioTotal = 0;
                double comissaoSobreTipoPagamentoFuncionarioTotal = 0;

                //Produtos Vendidos
                if (funcionario.calculaProdutos)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Produtos Vendidos");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovFuncionarioL)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(movItem.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            if (item.tipo == EItemTipo.produto)
                            {
                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", item.nome);
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoProdutos.ToString()), false));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoProdutos) / 100).ToString()), true));
                                sb.Append("</tr>");
                                comissaoProdutosVendidosFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoProdutos) / 100;
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Produtos em Garantia
                if (funcionario.calculaProdutosEmGarantia)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Produtos em Garantia");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovFuncionarioL)
                    {
                        //verifica se tem OS de origem da garantia
                        OrdemServico ordemServico = null;
                        query = db.Query();
                        query.Constrain(typeof(OrdemServico));
                        query.Descend("idTransacao").Constrain(mov.idTransacao);
                        if (query.Execute().Count == 0)
                            continue;
                        else
                            ordemServico = query.Execute()[0] as OrdemServico;
                        
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(OrdemServico_Item));
                        query.Descend("idOrdemServico").Constrain(ordemServico.id);
                        IObjectSet setterOrdemServicoItem = query.Execute();

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            foreach (OrdemServico_Item osi in setterOrdemServicoItem)
                            {
                                if (osi.idItem == movItem.idItem && osi.tipoItem == "G")
                                {
                                    Item item = null;
                                    query = db.Query();
                                    query.Constrain(typeof(Item));
                                    query.Descend("id").Constrain(movItem.idItem);
                                    if (query.Execute().Count == 0)
                                        throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                                    else
                                        item = query.Execute()[0] as Item;

                                    if (item.tipo == EItemTipo.produto)
                                    {
                                        sb.Append("<tr>");
                                        sb.AppendFormat("<td>{0}</td>", item.nome);
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoProdutosEmGarantia.ToString()), false));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoProdutosEmGarantia) / 100).ToString()), true));
                                        sb.Append("</tr>");
                                        comissaoProdutosEmGarantiaFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoProdutosEmGarantia) / 100;
                                    }
                                }
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Mão de Obra
                if (funcionario.calculaMaoDeObra)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Mão de Obra");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovFuncionarioL)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(movItem.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            if (item.tipo == EItemTipo.servico)
                            {
                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", item.nome);
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoMaoDeObra.ToString()), false));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObra) / 100).ToString()), true));
                                sb.Append("</tr>");
                                comissaoMaoDeObraFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObra) / 100;
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Mao de Obra Geral
                if (funcionario.calculaMaoDeObraGeral)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Mão de Obra Geral");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovPeriodo)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(movItem.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            if (item.tipo == EItemTipo.servico)
                            {
                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", item.nome);
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoMaoDeObraGeral.ToString()), false));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGeral) / 100).ToString()), true));
                                sb.Append("</tr>");
                                comissaoMaoDeObraGeralFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGeral) / 100;
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Mão de Obra em Garantia
                if (funcionario.calculaMaoDeObraGarantia)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Mão de Obra em Garantia");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovFuncionarioL)
                    {
                        //verifica se tem OS de origem da garantia
                        OrdemServico ordemServico = null;
                        query = db.Query();
                        query.Constrain(typeof(OrdemServico));
                        query.Descend("idTransacao").Constrain(mov.idTransacao);
                        if (query.Execute().Count == 0)
                            continue;
                        else
                            ordemServico = query.Execute()[0] as OrdemServico;

                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(OrdemServico_Item));
                        query.Descend("idOrdemServico").Constrain(ordemServico.id);
                        IObjectSet setterOrdemServicoItem = query.Execute();

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            foreach (OrdemServico_Item osi in setterOrdemServicoItem)
                            {
                                if (osi.idItem == movItem.idItem && osi.tipoItem == "G")
                                {
                                    Item item = null;
                                    query = db.Query();
                                    query.Constrain(typeof(Item));
                                    query.Descend("id").Constrain(movItem.idItem);
                                    if (query.Execute().Count == 0)
                                        throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                                    else
                                        item = query.Execute()[0] as Item;

                                    if (item.tipo == EItemTipo.servico)
                                    {
                                        sb.Append("<tr>");
                                        sb.AppendFormat("<td>{0}</td>", item.nome);
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoMaoDeObraGarantia.ToString()), false));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGarantia) / 100).ToString()), true));
                                        sb.Append("</tr>");
                                        comissaoMaoDeObraGarantiaFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGarantia) / 100;
                                    }
                                }
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Mão de Obra Geral em Garantia
                if (funcionario.calculaMaoDeObraGeralGarantia)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Mão de Obra Geral em Garantia");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovPeriodo)
                    {
                        //verifica se tem OS de origem da garantia
                        OrdemServico ordemServico = null;
                        query = db.Query();
                        query.Constrain(typeof(OrdemServico));
                        query.Descend("idTransacao").Constrain(mov.idTransacao);
                        if (query.Execute().Count == 0)
                            continue;
                        else
                            ordemServico = query.Execute()[0] as OrdemServico;

                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(OrdemServico_Item));
                        query.Descend("idOrdemServico").Constrain(ordemServico.id);
                        IObjectSet setterOrdemServicoItem = query.Execute();

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            foreach (OrdemServico_Item osi in setterOrdemServicoItem)
                            {
                                if (osi.idItem == movItem.idItem && osi.tipoItem == "G")
                                {
                                    Item item = null;
                                    query = db.Query();
                                    query.Constrain(typeof(Item));
                                    query.Descend("id").Constrain(movItem.idItem);
                                    if (query.Execute().Count == 0)
                                        throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                                    else
                                        item = query.Execute()[0] as Item;

                                    if (item.tipo == EItemTipo.servico)
                                    {
                                        sb.Append("<tr>");
                                        sb.AppendFormat("<td>{0}</td>", item.nome);
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoMaoDeObraGeralGarantia.ToString()), false));
                                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGeralGarantia) / 100).ToString()), true));
                                        sb.Append("</tr>");
                                        comissaoMaoDeObraGeralGarantiaFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMaoDeObraGeralGarantia) / 100;
                                    }
                                }
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Montante Total
                if (funcionario.calculaMontanteTotal)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Montante Total");
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    if (!mostraMov)
                    {
                        sb.Append("<table class='tabela_mov'>");
                        sb.Append("<thead>");
                        sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                        sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                    }
                    foreach (Mov mov in listaMovPeriodo)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(movItem.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            sb.Append("<tr>");
                            sb.AppendFormat("<td>{0}</td>", item.nome);
                            sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                            sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(funcionario.comissaoMontanteTotal.ToString()), false));
                            sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMontanteTotal) / 100).ToString()), true));
                            sb.Append("</tr>");
                            comissaoMontanteTotalFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * funcionario.comissaoMontanteTotal) / 100;
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                    if (!mostraMov)
                    {
                        sb.Append("</tbody>");
                        sb.Append("</table>");
                    }
                }

                //Sobre Tipo de Pagamento
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Formas de Pagamento");
                sb.Append("</tr>");
                sb.Append("</table>");

                if (!mostraMov)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead>");
                    sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");
                }
                foreach (Mov mov in listaMovFuncionarioL)
                {
                    bool imprime = false;
                    List<Finan_TipoPagamento> listaTipoPagamentoMov = new List<Finan_TipoPagamento>();

                    query = db.Query();
                    query.Constrain(typeof(Cx_Lancamento));
                    query.Descend("idTransacao").Constrain(mov.idTransacao);
                    foreach (Cx_Lancamento cxL in query.Execute())
                    {
                        query = db.Query();
                        query.Constrain(typeof(Finan_TipoPagamento));
                        query.Descend("id").Constrain(cxL.idTipoPagamento);
                        if ((query.Execute()[0] as Finan_TipoPagamento).pctComissao == 0)
                            continue;
                        imprime = true;
                        if (!listaTipoPagamentoMov.Contains((query.Execute()[0] as Finan_TipoPagamento)))
                            listaTipoPagamentoMov.Add(query.Execute()[0] as Finan_TipoPagamento);
                    }

                    if (imprime)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem movItem in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(movItem.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            foreach (Finan_TipoPagamento finanTipoPagamento in listaTipoPagamentoMov)
                            {
                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", item.nome);
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(finanTipoPagamento.pctComissao.ToString()), false));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * finanTipoPagamento.pctComissao) / 100).ToString()), true));
                                sb.Append("</tr>");
                                comissaoSobreTipoPagamentoFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * finanTipoPagamento.pctComissao) / 100;
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                }
                if (!mostraMov)
                {
                    sb.Append("</tbody>");
                    sb.Append("</table>");
                }

                //Sobre Produtos
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='font-size:12px; font-weight:bold'>{0}</th>", "Comissão Sobre Vendas");
                sb.Append("</tr>");
                sb.Append("</table>");

                if (!mostraMov)
                {
                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead>");
                    sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                    sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");
                }
                foreach (Mov mov in listaMovFuncionarioL)
                {
                    bool imprime = false;

                    query = db.Query();
                    query.Constrain(typeof(MovItem));
                    query.Descend("idMov").Constrain(mov.id);
                    foreach (MovItem mi in query.Execute())
                    {
                        if (mi.pctComissaoPreco == 0)
                            continue;
                        imprime = true;
                        break;
                    }

                    if (imprime)
                    {
                        //identificação da movimentação
                        if (mostraMov)
                        {
                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead/>");
                            sb.Append("<tr>");
                            sb.AppendFormat("<th style='font-weight:bold;'>Movimentação: {0} - Data: {1}</th>", mov.id, mov.dthrMovEmissao);
                            sb.Append("</tr>");
                            sb.Append("</table>");

                            sb.Append("<table class='tabela_mov'>");
                            sb.Append("<thead>");
                            sb.Append("<th scoupe='colune' style='width:70%;'>Item</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Valor</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(%)</th>");
                            sb.Append("<th scoupe='colune' style='width:10%;'>Comissão(R$)</th>");
                            sb.Append("</thead>");
                            sb.Append("<tbody>");
                        }

                        foreach (MovItem movItem in query.Execute())
                        {
                            if (movItem.pctComissaoPreco > 0)
                            {
                                Item item = null;
                                query = db.Query();
                                query.Constrain(typeof(Item));
                                query.Descend("id").Constrain(movItem.idItem);
                                if (query.Execute().Count == 0)
                                    throw new Exception("Item não encontrado. ID: " + movItem.idItem);
                                else
                                    item = query.Execute()[0] as Item;

                                sb.Append("<tr>");
                                sb.AppendFormat("<td>{0}</td>", item.nome);
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.vlrUnitVendaFinalQtd.ToString()), true));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(movItem.pctComissaoPreco.ToString()), false));
                                sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(((movItem.vlrUnitVendaFinalQtd * movItem.pctComissaoPreco) / 100).ToString()), true));
                                sb.Append("</tr>");
                                comissaoSobreProdutosFuncionarioTotal += (movItem.vlrUnitVendaFinalQtd * movItem.pctComissaoPreco) / 100;
                            }
                        }
                        if (mostraMov)
                        {
                            sb.Append("</tbody>");
                            sb.Append("</table>");
                        }
                    }
                }
                if (!mostraMov)
                {
                    sb.Append("</tbody>");
                    sb.Append("</table>");
                }

                //comissao total do funcionario
                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                if (comissaoMontanteTotalFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Montante Total: {0}</th>", formatMoney(Decimal.Parse(comissaoMontanteTotalFuncionarioTotal.ToString()), true));
                if (comissaoMaoDeObraFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Mão de Obra: {0}</th>", formatMoney(Decimal.Parse(comissaoMaoDeObraFuncionarioTotal.ToString()), true));
                if (comissaoMaoDeObraGeralFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Mão de Obra Geral: {0}</th>", formatMoney(Decimal.Parse(comissaoMaoDeObraGeralFuncionarioTotal.ToString()), true));
                if (comissaoMaoDeObraGarantiaFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Mão de Obra Garantia: {0}</th>", formatMoney(Decimal.Parse(comissaoMaoDeObraGarantiaFuncionarioTotal.ToString()), true));
                if (comissaoMaoDeObraGeralGarantiaFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Mão de Obra Geral Garantia: {0}</th>", formatMoney(Decimal.Parse(comissaoMaoDeObraGeralGarantiaFuncionarioTotal.ToString()), true));
                if (comissaoProdutosEmGarantiaFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Produtos em Garantia: {0}</th>", formatMoney(Decimal.Parse(comissaoProdutosEmGarantiaFuncionarioTotal.ToString()), true));
                if (comissaoProdutosVendidosFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Produtos: {0}</th>", formatMoney(Decimal.Parse(comissaoProdutosVendidosFuncionarioTotal.ToString()), true));
                if (comissaoSobreTipoPagamentoFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Comissão por Tipo de Pagamento: {0}</th>", formatMoney(Decimal.Parse(comissaoSobreTipoPagamentoFuncionarioTotal.ToString()), true));
                if (comissaoSobreProdutosFuncionarioTotal > 0)
                    sb.AppendFormat("<th style='font-size:14px; border-bottom:1px solid #808080;'>Soma Vendas: {0}</th>", formatMoney(Decimal.Parse(comissaoSobreProdutosFuncionarioTotal.ToString()), true));
                sb.Append("</tr>");
                sb.Append("<tr>");
                sb.AppendFormat("<th style='font-size:15px; border-bottom:1px solid #808080;'>Comissão Total {0}: {1}</th>", funcionario.nome,
                    formatMoney(Decimal.Parse((
                    comissaoMontanteTotalFuncionarioTotal + comissaoMaoDeObraFuncionarioTotal + comissaoMaoDeObraGarantiaFuncionarioTotal +
                    comissaoProdutosEmGarantiaFuncionarioTotal + comissaoProdutosVendidosFuncionarioTotal + comissaoSobreProdutosFuncionarioTotal
                    ).ToString()), true));
                sb.Append("</tr>");
                sb.Append("</table>");
            }
        }
        
        #region Utils

        private string formata_cpf_cnpj(string cpf_cnpj)
        {
            StringBuilder dado = new StringBuilder();
            string mascara = "";
            string tipo = "";

            if (cpf_cnpj.Length == 11)
            {
                mascara = "###.###.###-##";
                tipo = "CPF";
            }
            else
            {
                mascara = "##.###.###/####-##";
                tipo = "CNPJ";
            }

            foreach (char c in cpf_cnpj)
            {
                if (Char.IsNumber(c))
                    dado.Append(c);
            }

            int indMascara = mascara.Length;
            int indCampo = dado.Length;

            for (; indCampo > 0 && indMascara > 0; )
            {
                if (mascara[--indMascara] == '#')
                    indCampo--;
            }

            StringBuilder saida = new StringBuilder();
            for (; indMascara < mascara.Length; indMascara++)
                saida.Append((mascara[indMascara] == '#') ? dado[indCampo++] : mascara[indMascara]);

            return tipo + ": " + saida.ToString();
        }
        private void escreveContatos(StringBuilder sb, IList<ClienteContato> contatos)
        {
            string cContatos = "";
            sb.Append("<tr>");
            for (int i = 0; i < contatos.Count; i++)
            {
                ClienteContato cc = contatos[i];
                cContatos += string.Format("{0}: {1},   ", cc.campo, cc.valor);
            }
            sb.AppendFormat("<th style='font-size: 12px;'>Contato(s): {0}</th>", cContatos);
            sb.Append("</tr>");
        }
        private string defineTipoImpressao(EMovImpressao impressao)
        {
            string retorno = "";
            if (impressao == EMovImpressao.reserva)
                retorno = "RESERVA DE ESTOQUE";
            else if (impressao == EMovImpressao.orcamento)
                retorno = "ORÇAMNETO";
            else
                retorno = "VENDA";
            return retorno;
        }
        private string formatMoney(Decimal d, Boolean mostra_cifra)
        {
            if (mostra_cifra)
                return String.Format(CultureInfo.CreateSpecificCulture("pt-br"), "{0:C}", d);
            else
                return String.Format(CultureInfo.CreateSpecificCulture("pt-br"), "{0:N}", d);
        }
        private DateTime StringToDateTime(string dataString)
        {
            if (dataString.Length == 10)
                return DateTime.Parse(dataString);
            else
                return DateTime.Parse(dataString.Substring(0, 10));
        }
        private EMovTipo getMovTipo(string tipo)
        {
            if (tipo == "Venda")
                return EMovTipo.saida_venda;
            if (tipo == "Orçamento")
                return EMovTipo.outros_orcamento;
            if (tipo == "Pedido")
                return EMovTipo.outros_pedido;
            if (tipo == "Reserva")
                return EMovTipo.outros_reserva;
            if (tipo == "Compra")
                return EMovTipo.entrada_compra;
            if (tipo == "Balanço")
                return EMovTipo.ambos_balan;
            if (tipo == "Serviço")
                return EMovTipo.outros_servicos;
            if (tipo == "NFS Prefeitura RV (DMS)")
                return EMovTipo.nfs_prefeitura;
            if (tipo == "Venda Cancelada")
                return EMovTipo.entrada_cancel;
            if (tipo == "Compra Cancelada")
                return EMovTipo.saida_cancel;
            if (tipo == "Devolução")
                return EMovTipo.entrada_devolucao;
            if (tipo == "Ajuste de Estoque")
                return EMovTipo.ambos_ajuste_estoque;
            else
                return EMovTipo.saida_venda;
        }
        private string tipoMovNome(Mov mov)
        {
            if (mov.tipo == EMovTipo.ambos_balan)
                return "Balanço";
            if (mov.tipo == EMovTipo.ambos_cancel)
                return "Cancelada";
            if (mov.tipo == EMovTipo.ambos_ajuste_estoque)
                return "Ajuste de Estoque";
            if (mov.tipo == EMovTipo.entrada_cancel)
                return "Entrada Cancelada";
            if (mov.tipo == EMovTipo.entrada_compra)
                return "Compra";
            if (mov.tipo == EMovTipo.entrada_devolucao)
                return "Devolução de Entrada";
            if (mov.tipo == EMovTipo.nfs_prefeitura)
                return "NFS Prefeitura (DMS)";
            if (mov.tipo == EMovTipo.outros_cancel)
                return "Cancelada";
            if (mov.tipo == EMovTipo.outros_orcamento)
                return "Orçamento";
            if (mov.tipo == EMovTipo.outros_pedido)
                return "Pedido";
            if (mov.tipo == EMovTipo.outros_reserva)
                return "Reserva";
            if (mov.tipo == EMovTipo.outros_servicos)
                return "Serviço";
            if (mov.tipo == EMovTipo.saida_cancel)
                return "Venda Cancelada";
            if (mov.tipo == EMovTipo.saida_condi)
                return "Saida Condicional";
            if (mov.tipo == EMovTipo.saida_devolucao)
                return "Devolução de Saida";
            if (mov.tipo == EMovTipo.saida_venda)
                return "Venda";
            else
                return "Não Tratado";
        }
        private string defineTipoOrdemServico(string tipo)
        {
            if (tipo == "S")
                return "Serviço";
            if (tipo == "P")
                return "Produto";
            if (tipo == "G")
                return "Garantia";
            if (tipo == "ST")
                return "Serviço de terceiros";
            if (tipo == "PT")
                return "Produto de Terceiros";
            if (tipo == "PU")
                return "Produto Utilizado";
            if (tipo == "MP")
                return "Materia Prima";
            else
                return "Tipo Não Tratado";
        }
        private string defineNumeroTitulo(string numero, string parcela)
        {
            while (numero.Length < 7)
                numero = "0" + numero;

            return "VD"+numero+"-"+parcela;
        }

        #endregion

        #region Comissionamento
        /*
            Dictionary<int, List<Mov>> dictMov = new Dictionary<int, List<Mov>>();

            query = db.Query();
            query.Constrain(typeof(Mov));
            query.Descend("dthrMovEmissao").OrderAscending();
            List<Mov> listaMov = new List<Mov>();
            foreach (Mov mov in query.Execute())
            {
                if (mov.dthrMovEmissao != null)
                {
                    if ((StringToDateTime(mov.dthrMovEmissao.Substring(0, 10)) >= StringToDateTime(dataInicio)
                        || StringToDateTime(mov.dthrMovEmissao.Substring(0, 10)) <= StringToDateTime(dataFim))
                        && mov.tipo == EMovTipo.saida_venda)
                    {
                        listaMov.Add(mov);
                    }
                }
            }

            if (idFuncionario == 1)
            {
                throw new Exception("Não é calculado comissão para CLIENTE CONSUMIDOR");
            }
            else if (idFuncionario > 1)
            {
                List<Mov> listaMovTemp = new List<Mov>();
                foreach (Mov mov in listaMov)
                    if (mov.idClienteFuncionarioVendedor == idFuncionario)
                        listaMovTemp.Add(mov);

                listaMov = listaMovTemp;
            }
            else
            {
                foreach (Mov mov in listaMov)
                {
                    if (!dictMov.ContainsKey(mov.idClienteFuncionarioVendedor))
                        dictMov.Add(mov.idClienteFuncionarioVendedor, new List<Mov>());
                    dictMov[mov.idClienteFuncionarioVendedor].Add(mov);  
                }
            }

            //pesquisas de cabeçalho
            Empresa emp = null;
            foreach (Empresa xxx in db.Query<Empresa>())
                if (xxx.id == idEmp)
                {
                    emp = xxx;
                    break;
                }
            //
            Cliente cli_emp = null;
            foreach (Cliente xxx in db.Query<Cliente>())
                if (xxx.id == emp.idCliente)
                {
                    cli_emp = xxx;
                    break;
                }
            //
            List<ClienteEndereco> cli_empresa_enderecos = new List<ClienteEndereco>();
            foreach (ClienteEndereco xxx in db.Query<ClienteEndereco>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_enderecos.Add(xxx);
            //
            List<ClienteContato> cli_empresa_contatos = new List<ClienteContato>();
            foreach (ClienteContato xxx in db.Query<ClienteContato>())
                if (xxx.idCliente == cli_emp.id)
                    cli_empresa_contatos.Add(xxx);
            //
            if (cli_empresa_enderecos.Count == 0)
                cli_empresa_enderecos.Add(new ClienteEndereco());
            if (cli_empresa_contatos.Count == 0)
                cli_empresa_contatos.Add(new ClienteContato());


            sb.Append("<table class='tabela_head'>");
            sb.Append("<thead>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>{0}</th>", (cli_emp.apelido_razsoc == "") ? cli_emp.nome : cli_emp.apelido_razsoc);
            sb.AppendFormat("<th>{0}</th>", formata_cpf_cnpj(cli_emp.cpf_cnpj));
            sb.Append("</tr>");
            sb.Append("<tr>");
            sb.AppendFormat("<th>Cidade: {0}-{1}</th>", cli_empresa_enderecos[0].cidade, cli_empresa_enderecos[0].uf);
            sb.AppendFormat("<th>Inscrição Estadual: {0}</th>", cli_empresa_enderecos[0].inscr);
            sb.Append("</tr>");
            contatosEmpresa(sb, cli_empresa_contatos);
            sb.Append("</thead>");
            sb.Append("</table>");

            sb.Append("<table class='tabela_ass'>");
            sb.Append("<thead/>");
            sb.Append("<tr>");
            sb.AppendFormat("<th style='fontsize: 16px;'>{0}</th>", "COMISSIONAMENTO DINÂMICO");
            sb.AppendFormat("<th style='fontsize: 16px;'>PERÍODO: DE {0} A {1}</th>", dataInicio, dataFim);
            sb.Append("</tr>");
            sb.Append("</table>");

            if (idFuncionario > 1)
            {
                Cliente funcionario = null;
                query = db.Query();
                query.Constrain(typeof(Cliente));
                query.Descend("id").Constrain(idFuncionario);
                if (query.Execute().Count == 0)
                    throw new Exception("Funcionário não encontrado. ID: " + idFuncionario);
                else
                    funcionario = query.Execute()[0] as Cliente;

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th>{0}</th>", funcionario.nome);
                sb.Append("</tr>");
                sb.Append("</table>");

                double totalComissaoMontanteTotal = 0;
                double totalComissaoMaoDeObra = 0;
                double totalComissaoMaoDeObraGarantia = 0;
                double totalComissaoProdutosEmGarantia = 0;
                double totalComissaoProdutos = 0;
                double totalComissaoItemProduto = 0;

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead>");
                sb.Append("<th scoupe='colune'>Cód.</th>");
                sb.Append("<th scoupe='colune'>Data</th>");
                sb.Append("<th scoupe='colune'>Valor Mov.</th>");
                sb.Append("<th scoupe='colune'>MT</th>");
                sb.Append("<th scoupe='colune'>MO</th>");
                sb.Append("<th scoupe='colune'>MOG</th>");
                sb.Append("<th scoupe='colune'>PG</th>");
                sb.Append("<th scoupe='colune'>P</th>");
                sb.Append("<th scoupe='colune'>IP</th>");
                sb.Append("<th scoupe='colune'>TOTAL</th>");
                sb.Append("</thead>");
                sb.Append("<tbody>");

                foreach (Mov mov in listaMov)
                {
                    double baseCalculoComissaoMontanteTotal = 0;
                    double baseCalculoComissaoMaoDeObra = 0;
                    double baseCalculoComissaoMaoDeObraGarantia = 0;
                    double baseCalculoComissaoProdutosEmGarantia = 0;
                    double baseCalculoComissaoProdutos = 0;

                    double comissaoItemProduto = 0;

                    query = db.Query();
                    query.Constrain(typeof(MovItem));
                    query.Descend("idMov").Constrain(mov.id);
                    foreach (MovItem mi in query.Execute())
                    {
                        Item item = null;
                        query = db.Query();
                        query.Constrain(typeof(Item));
                        query.Descend("id").Constrain(mi.idItem);
                        if (query.Execute().Count == 0)
                            throw new Exception("Item não encontrado. ID: " + mi.idItem);
                        else
                            item = query.Execute()[0] as Item;

                        if (item.tipo == EItemTipo.servico)
                        {
                            baseCalculoComissaoMontanteTotal += mi.vlrUnitVendaFinalQtd;
                            baseCalculoComissaoMaoDeObra += mi.vlrUnitVendaFinalQtd;
                            baseCalculoComissaoMaoDeObraGarantia += mi.vlrUnitVendaFinalQtd;
                        }
                        else if (item.tipo == EItemTipo.produto)
                        {
                            baseCalculoComissaoMontanteTotal += mi.vlrUnitVendaFinalQtd;
                            baseCalculoComissaoProdutosEmGarantia += mi.vlrUnitVendaFinalQtd;
                            baseCalculoComissaoProdutos += mi.vlrUnitVendaFinalQtd;
                        }

                        comissaoItemProduto += (mi.vlrComissaoPreco * mi.vlrUnitVendaFinalQtd) / 100;
                    }

                    double comissaoMontanteTotal = (baseCalculoComissaoMontanteTotal * mov.comissaoFucionarioMontanteTotal) / 100;
                    double comissaoMaoDeObra = (baseCalculoComissaoMaoDeObra * mov.comissaoFucionarioMaoDeObra) / 100;
                    double comissaoMaoDeObraGarantia = (baseCalculoComissaoMaoDeObraGarantia * mov.comissaoFucionarioMaoDeObraGarantia) / 100;
                    double comissaoProdutosEmGarantia = (baseCalculoComissaoProdutosEmGarantia * mov.comissaoFucionarioProdutosEmGarantia) / 100;
                    double comissaoProdutos = (baseCalculoComissaoProdutos * mov.comissaoFucionarioProdutos) / 100;

                    sb.Append("<tr>");
                    sb.AppendFormat("<td>{0}</td>", mov.id);
                    sb.AppendFormat("<td>{0}</td>", mov.dthrMovEmissao.Substring(0, 10));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mov.vlrTotal.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMontanteTotal.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMaoDeObra.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMaoDeObraGarantia.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoProdutosEmGarantia.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoProdutos.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoItemProduto.ToString()), true));
                    sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse((
                            comissaoMontanteTotal + comissaoMaoDeObra + comissaoMaoDeObraGarantia +
                            comissaoProdutosEmGarantia + comissaoProdutos + comissaoItemProduto
                            ).ToString()), true));
                    sb.Append("</tr>");

                    totalComissaoMontanteTotal += comissaoMontanteTotal;
                    totalComissaoMaoDeObra += comissaoMaoDeObra;
                    totalComissaoMaoDeObraGarantia += comissaoMaoDeObraGarantia;
                    totalComissaoProdutosEmGarantia += comissaoProdutosEmGarantia;
                    totalComissaoProdutos += comissaoProdutos;
                    totalComissaoItemProduto += comissaoItemProduto;
                }

                sb.Append("</tbody>");
                sb.Append("</table>");

                sb.Append("<table class='tabela_mov'>");
                sb.Append("<thead/>");
                sb.Append("<tr>");
                sb.AppendFormat("<th>Soma Montante Total: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMontanteTotal.ToString()), true));
                sb.AppendFormat("<th>Soma Mão de Obra: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMaoDeObra.ToString()), true));
                sb.AppendFormat("<th>Soma Mão de Obra Garantia: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMaoDeObraGarantia.ToString()), true));
                sb.AppendFormat("<th>Soma Produtos em Garantia: {0}</th>", formatMoney(Decimal.Parse(totalComissaoProdutosEmGarantia.ToString()), true));
                sb.AppendFormat("<th>Soma Produtos: {0}</th>", formatMoney(Decimal.Parse(totalComissaoProdutos.ToString()), true));
                sb.AppendFormat("<th>Soma Item Produto: {0}</th>", formatMoney(Decimal.Parse(totalComissaoItemProduto.ToString()), true));
                sb.Append("</tr>");
                sb.Append("<tr>");
                sb.AppendFormat("<th>Comissão Total: {0}</th>", formatMoney(Decimal.Parse((
                    totalComissaoMontanteTotal + totalComissaoMaoDeObra + totalComissaoMaoDeObraGarantia +
                    totalComissaoProdutosEmGarantia + totalComissaoProdutos + totalComissaoItemProduto
                    ).ToString()), true));
                sb.Append("</tr>");
                sb.Append("</table>");
            }
            else
            {
                for (int i = 0; i < dictMov.Count; i++)
                {
                    Cliente funcionario = null;
                    query = db.Query();
                    query.Constrain(typeof(Cliente));
                    query.Descend("id").Constrain(dictMov.ElementAt(i).Key);
                    if (query.Execute().Count == 0)
                        throw new Exception("Funcionário não encontrado. ID: " + dictMov.ElementAt(i).Key);
                    else
                        funcionario = query.Execute()[0] as Cliente;

                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th>{0}</th>", funcionario.nome);
                    sb.Append("</tr>");
                    sb.Append("</table>");

                    double totalComissaoMontanteTotal = 0;
                    double totalComissaoMaoDeObra = 0;
                    double totalComissaoMaoDeObraGarantia = 0;
                    double totalComissaoProdutosEmGarantia = 0;
                    double totalComissaoProdutos = 0;
                    double totalComissaoItemProduto = 0;

                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead>");
                    sb.Append("<th scoupe='colune'>Cód.</th>");
                    sb.Append("<th scoupe='colune'>Data</th>");
                    sb.Append("<th scoupe='colune'>Valor Mov.</th>");
                    sb.Append("<th scoupe='colune'>MT</th>");
                    sb.Append("<th scoupe='colune'>MO</th>");
                    sb.Append("<th scoupe='colune'>MOG</th>");
                    sb.Append("<th scoupe='colune'>PG</th>");
                    sb.Append("<th scoupe='colune'>P</th>");
                    sb.Append("<th scoupe='colune'>IP</th>");
                    sb.Append("<th scoupe='colune'>TOTAL</th>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");

                    foreach (Mov mov in dictMov.ElementAt(i).Value)
                    {
                        double baseCalculoComissaoMontanteTotal = 0;
                        double baseCalculoComissaoMaoDeObra = 0;
                        double baseCalculoComissaoMaoDeObraGarantia = 0;
                        double baseCalculoComissaoProdutosEmGarantia = 0;
                        double baseCalculoComissaoProdutos = 0;

                        double comissaoItemProduto = 0;

                        query = db.Query();
                        query.Constrain(typeof(MovItem));
                        query.Descend("idMov").Constrain(mov.id);
                        foreach (MovItem mi in query.Execute())
                        {
                            Item item = null;
                            query = db.Query();
                            query.Constrain(typeof(Item));
                            query.Descend("id").Constrain(mi.idItem);
                            if (query.Execute().Count == 0)
                                throw new Exception("Item não encontrado. ID: " + mi.idItem);
                            else
                                item = query.Execute()[0] as Item;

                            if (item.tipo == EItemTipo.servico)
                            {
                                baseCalculoComissaoMontanteTotal += mi.vlrUnitVendaFinalQtd;
                                baseCalculoComissaoMaoDeObra += mi.vlrUnitVendaFinalQtd;
                                baseCalculoComissaoMaoDeObraGarantia += mi.vlrUnitVendaFinalQtd;
                            }
                            else if (item.tipo == EItemTipo.produto)
                            {
                                baseCalculoComissaoMontanteTotal += mi.vlrUnitVendaFinalQtd;
                                baseCalculoComissaoProdutosEmGarantia += mi.vlrUnitVendaFinalQtd;
                                baseCalculoComissaoProdutos += mi.vlrUnitVendaFinalQtd;
                            }

                            comissaoItemProduto += (mi.vlrComissaoPreco * mi.vlrUnitVendaFinalQtd) / 100;
                        }

                        double comissaoMontanteTotal = (baseCalculoComissaoMontanteTotal * mov.comissaoFucionarioMontanteTotal) / 100;
                        double comissaoMaoDeObra = (baseCalculoComissaoMaoDeObra * mov.comissaoFucionarioMaoDeObra) / 100;
                        double comissaoMaoDeObraGarantia = (baseCalculoComissaoMaoDeObraGarantia * mov.comissaoFucionarioMaoDeObraGarantia) / 100;
                        double comissaoProdutosEmGarantia = (baseCalculoComissaoProdutosEmGarantia * mov.comissaoFucionarioProdutosEmGarantia) / 100;
                        double comissaoProdutos = (baseCalculoComissaoProdutos * mov.comissaoFucionarioProdutos) / 100;

                        sb.Append("<tr>");
                        sb.AppendFormat("<td>{0}</td>", mov.id);
                        sb.AppendFormat("<td>{0}</td>", mov.dthrMovEmissao.Substring(0, 10));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(mov.vlrTotal.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMontanteTotal.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMaoDeObra.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoMaoDeObraGarantia.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoProdutosEmGarantia.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoProdutos.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse(comissaoItemProduto.ToString()), true));
                        sb.AppendFormat("<td>{0}</td>", formatMoney(Decimal.Parse((
                            comissaoMontanteTotal + comissaoMaoDeObra + comissaoMaoDeObraGarantia +
                            comissaoProdutosEmGarantia + comissaoProdutos + comissaoItemProduto
                            ).ToString()), true));
                        sb.Append("</tr>");

                        totalComissaoMontanteTotal += comissaoMontanteTotal;
                        totalComissaoMaoDeObra += comissaoMaoDeObra;
                        totalComissaoMaoDeObraGarantia += comissaoMaoDeObraGarantia;
                        totalComissaoProdutosEmGarantia += comissaoProdutosEmGarantia;
                        totalComissaoProdutos += comissaoProdutos;
                        totalComissaoItemProduto += comissaoItemProduto;
                    }

                    sb.Append("</tbody>");
                    sb.Append("</table>");

                    sb.Append("<table class='tabela_mov'>");
                    sb.Append("<thead/>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th>Soma Montante Total: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMontanteTotal.ToString()), true));
                    sb.AppendFormat("<th>Soma Mão de Obra: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMaoDeObra.ToString()), true));
                    sb.AppendFormat("<th>Soma Mão de Obra Garantia: {0}</th>", formatMoney(Decimal.Parse(totalComissaoMaoDeObraGarantia.ToString()), true));
                    sb.AppendFormat("<th>Soma Produtos em Garantia: {0}</th>", formatMoney(Decimal.Parse(totalComissaoProdutosEmGarantia.ToString()), true));
                    sb.AppendFormat("<th>Soma Produtos: {0}</th>", formatMoney(Decimal.Parse(totalComissaoProdutos.ToString()), true));
                    sb.AppendFormat("<th>Soma Item Produto: {0}</th>", formatMoney(Decimal.Parse(totalComissaoItemProduto.ToString()), true));
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.AppendFormat("<th>Comissão Total: {0}</th>", formatMoney(Decimal.Parse((
                        totalComissaoMontanteTotal + totalComissaoMaoDeObra + totalComissaoMaoDeObraGarantia +
                        totalComissaoProdutosEmGarantia + totalComissaoProdutos + totalComissaoItemProduto
                        ).ToString()), true));
                    sb.Append("</tr>");
                    sb.Append("</table>");
                }
            }

            * */
        #endregion
=======
>>>>>>> .r103
    }
}
